[
    {
        "id": "c24acee5.55115",
        "type": "tab",
        "label": "NFT Multimaker nosell",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e1a3be1e.3571d",
        "type": "tab",
        "label": "Testnet Wallet",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a0cdded1.a335c",
        "type": "tab",
        "label": "RoyalT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cbb5f88593031478",
        "type": "tab",
        "label": "ngrok",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "60973256.20713c",
        "type": "ui_group",
        "name": "NFT Nosell",
        "tab": "73449d79.7a6494",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "73449d79.7a6494",
        "type": "ui_tab",
        "name": "NFT Generator",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7cd03ff88aea68cb",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1f563092.450a6f",
        "type": "ui_group",
        "name": "Check Balances",
        "tab": "ddc63819.638318",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "c3c52113.338a9",
        "type": "ui_group",
        "name": "Send Transaction",
        "tab": "ddc63819.638318",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ad15b2e3.60848",
        "type": "ui_group",
        "name": "Make Offer",
        "tab": "ddc63819.638318",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a947341d.96f6c8",
        "type": "ui_group",
        "name": "Generate New Keypair",
        "tab": "eaad2b20.f0cd48",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ddc63819.638318",
        "type": "ui_tab",
        "name": "Testnet Wallet",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eaad2b20.f0cd48",
        "type": "ui_tab",
        "name": "Account Generator",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b7bc8c2.90c527",
        "type": "ui_group",
        "name": "Buy",
        "tab": "2cda40af.acf6e",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f36459ea.16b5d8",
        "type": "ui_group",
        "name": "Mint",
        "tab": "2cda40af.acf6e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a9b7ad7b.f992a",
        "type": "sqlitedb",
        "db": "RoyalT",
        "mode": "RWC"
    },
    {
        "id": "f18028a3.d866a8",
        "type": "ui_group",
        "name": "Sell",
        "tab": "2cda40af.acf6e",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2cda40af.acf6e",
        "type": "ui_tab",
        "name": "RoyalT",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a4389ac42deda41c",
        "type": "ngrokauth",
        "name": "BlockShangerous"
    },
    {
        "id": "5b2c21f7.bd5df",
        "type": "inject",
        "z": "c24acee5.55115",
        "name": "",
        "props": [
            {
                "p": "secret",
                "v": "SBSZQMYX2EAT6MGDOAJ3OONFHT6TVVWLLAZEESRIQ7G3CYLHTCWTC3UX",
                "vt": "str"
            },
            {
                "p": "name",
                "v": "COOL",
                "vt": "str"
            },
            {
                "p": "iss",
                "v": "GBN5VTPXODILAQTMMB23ML5B7RKF657YXXALLWFKGZPSW53QGR6OUG4L",
                "vt": "str"
            },
            {
                "p": "op",
                "v": "changeTrust",
                "vt": "str"
            },
            {
                "p": "dest",
                "v": "GAC4LTCWBQAVRNXP67QMT55KZ3BIYPVMLIC46FYSO6HN2ZFZLFKW5WJX",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "e6f94184.3fe5f"
            ]
        ]
    },
    {
        "id": "224ae177.363a9e",
        "type": "comment",
        "z": "c24acee5.55115",
        "name": "Create Multiple NFTs",
        "info": "",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "c3cee975.8c5ba8",
        "type": "ui_button",
        "z": "c24acee5.55115",
        "name": "Create NFTs",
        "group": "60973256.20713c",
        "order": 8,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Create NFTs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "8f30390b.9e0e08",
                "ae1fb466.09b438"
            ]
        ]
    },
    {
        "id": "f1c7ce20.95a5d",
        "type": "ui_text_input",
        "z": "c24acee5.55115",
        "name": "Asset - Name",
        "label": "Asset - Name",
        "tooltip": "",
        "group": "60973256.20713c",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1180,
        "y": 920,
        "wires": [
            [
                "70ea4da1.941954"
            ]
        ]
    },
    {
        "id": "8ef3bf7a.660e6",
        "type": "ui_text_input",
        "z": "c24acee5.55115",
        "name": "Amount",
        "label": "Amount",
        "tooltip": "",
        "group": "60973256.20713c",
        "order": 5,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1160,
        "y": 1040,
        "wires": [
            [
                "6ba422a8.9537fc"
            ]
        ]
    },
    {
        "id": "727b6f1.20c869",
        "type": "ui_text_input",
        "z": "c24acee5.55115",
        "name": "Secret Key - Origin",
        "label": "Secret Key - Origin",
        "tooltip": "",
        "group": "60973256.20713c",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1190,
        "y": 880,
        "wires": [
            [
                "4f4e1ede.e3393"
            ]
        ]
    },
    {
        "id": "927c5a37.bdb248",
        "type": "ui_text_input",
        "z": "c24acee5.55115",
        "name": "Data",
        "label": "Data (IPFS CID)",
        "tooltip": "",
        "group": "60973256.20713c",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1150,
        "y": 960,
        "wires": [
            [
                "749f51c4.154fc"
            ]
        ]
    },
    {
        "id": "749f51c4.154fc",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "data",
        "func": "var data = msg.payload\nflow.set('data',data);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "70ea4da1.941954",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "asset",
        "func": "var asset = msg.payload\nflow.set('asset',asset);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "4f4e1ede.e3393",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "secretdist",
        "func": "var secretdist = msg.payload\nflow.set('secretdist',secretdist);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1400,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "6ba422a8.9537fc",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "count",
        "func": "var count = msg.payload\nflow.set('count',count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "e6f94184.3fe5f",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "Setup StellarSDK flow.transaction \\n fund new keypair",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nconst pair = StellarSdk.Keypair.random();\nmsg.secret=pair.secret();\nmsg.public=pair.publicKey();\n\nvar secretiss = msg.secret;\nvar assetiss = msg.public\nflow.set('assetiss',assetiss)\n\nvar secretdist = flow.get('secretdist',secretdist);\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\n\n\nvar transaction;\n\n//node.send(msg)\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.createAccount({\n          destination: msg.public,\n          startingBalance: \"1.5\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 180,
        "wires": [
            [
                "51452265.044b4c",
                "8b82cbc0.189d88"
            ]
        ]
    },
    {
        "id": "ec5fe2c2.192f1",
        "type": "ui_text",
        "z": "c24acee5.55115",
        "group": "60973256.20713c",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1340,
        "y": 500,
        "wires": []
    },
    {
        "id": "8f30390b.9e0e08",
        "type": "change",
        "z": "c24acee5.55115",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Building NFTs",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 500,
        "wires": [
            [
                "ec5fe2c2.192f1"
            ]
        ]
    },
    {
        "id": "51452265.044b4c",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "add trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretdist = flow.get('secretdist',secretdist);\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\n\nif (count<10){\n    count=\"0\"+count\n}\n\n/*if (count<100){\n    count=\"0\"+count\n}\n*/\nflow.set('count',count)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.changeTrust({\n          asset: new StellarSdk.Asset(asset+count,assetiss),\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 180,
        "wires": [
            [
                "1421f444.b1155c",
                "e6fb4e45.7764d"
            ]
        ]
    },
    {
        "id": "64865776.81c008",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "sign and submit \\n add data+domain \\n lock account",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretdist = flow.get('secretdist',secretdist);\nvar asset = flow.get('asset',asset)\nvar assetiss = flow.get('assetiss',assetiss)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar secretiss = msg.secret\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\nvar transaction;\n\nvar data = flow.get('data',data)\nvar domain = flow.get('domain',domain)\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n       .addOperation(\n        StellarSdk.Operation.manageData({\n          name: \"ipfs CID (base64)\",\n          value: data,\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      .addOperation(\n        StellarSdk.Operation.setOptions({\n          masterWeight: \"0\",\n          homeDomain: domain,\n          setFlags: 0x4,\n          //setFlags: 0x4|\"1\",\n          //setFlags: AuthImmutableFlag\n          //setFlags: StellarSdk.AuthImmutableFlag\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n    //node.send(msg)\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text('NFT by RedHorizon'))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n     // msg.xdr=transaction.toEnvelope().toXDR('base64')\n    //node.send(msg)\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    transaction.sign(distKeys);\n    // And finally, send it off to Stellar!\n    msg.xdr=transaction.toEnvelope().toXDR('base64')\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg)\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.error=\"Something went wrong! \"+ error;\n    node.send(msg)\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 420,
        "wires": [
            [
                "ec5fe2c2.192f1",
                "601c642.f33059c"
            ]
        ]
    },
    {
        "id": "1421f444.b1155c",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "send token",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = msg.secret;\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var amount = flow.get('amount',amount)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nvar secretdist = flow.get('secretdist',secretdist)\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: dist,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          //asset: StellarSdk.Asset.native(),\n          asset: new StellarSdk.Asset(asset+count,assetiss),\n          amount: \".0000001\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 180,
        "wires": [
            [
                "b2abbfc7.db2ea",
                "d775854f.ccc6c8"
            ]
        ]
    },
    {
        "id": "d775854f.ccc6c8",
        "type": "switch",
        "z": "c24acee5.55115",
        "name": "count",
        "property": "count",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "00",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "00",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 340,
        "wires": [
            [
                "6a210153.80028",
                "107cf14e.b06d7f"
            ],
            [
                "64865776.81c008"
            ]
        ]
    },
    {
        "id": "6a210153.80028",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "count-1",
        "func": "var count=flow.get('count',count)\ncount= count-1\n\nflow.set('count',count)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "51452265.044b4c",
                "e9cc65bb.f02e28"
            ]
        ]
    },
    {
        "id": "e1d8b434.7ff528",
        "type": "ui_text_input",
        "z": "c24acee5.55115",
        "name": "domain",
        "label": "Home domain (no https://www.)",
        "tooltip": "",
        "group": "60973256.20713c",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1160,
        "y": 1000,
        "wires": [
            [
                "d5f836e6.3ac928"
            ]
        ]
    },
    {
        "id": "d5f836e6.3ac928",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "domain",
        "func": "var domain = msg.payload\nflow.set('domain',domain);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1400,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e9cc65bb.f02e28",
        "type": "change",
        "z": "c24acee5.55115",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "count",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 440,
        "wires": [
            [
                "ec5fe2c2.192f1"
            ]
        ]
    },
    {
        "id": "ae1fb466.09b438",
        "type": "switch",
        "z": "c24acee5.55115",
        "name": "Network Switch",
        "property": "network",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 380,
        "wires": [
            [
                "e6f94184.3fe5f"
            ],
            [
                "6653b8d.1f9f648"
            ]
        ]
    },
    {
        "id": "6653b8d.1f9f648",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "Setup StellarSDK flow.transaction \\n fund new keypair",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon.stellar.org\");\n\nvar asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nconst pair = StellarSdk.Keypair.random();\nmsg.secret=pair.secret();\nmsg.public=pair.publicKey();\n\nvar secretiss = msg.secret;\nvar assetiss = msg.public\nflow.set('assetiss',assetiss)\n\nvar secretdist = flow.get('secretdist',secretdist);\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\n\n\nvar transaction;\n\n//node.send(msg)\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.PUBLIC,\n    })\n      .addOperation(\n        StellarSdk.Operation.createAccount({\n          destination: msg.public,\n          startingBalance: \"1.5\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "51452265.044b4c",
                "e22e931e.cc126"
            ]
        ]
    },
    {
        "id": "801d6251.4f55a",
        "type": "ui_dropdown",
        "z": "c24acee5.55115",
        "name": "",
        "label": "Network",
        "tooltip": "",
        "place": "Test",
        "group": "60973256.20713c",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Test",
                "value": "test",
                "type": "str"
            },
            {
                "label": "Public",
                "value": "public",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 1160,
        "y": 1120,
        "wires": [
            [
                "3681bd62.bccd82"
            ]
        ]
    },
    {
        "id": "3681bd62.bccd82",
        "type": "function",
        "z": "c24acee5.55115",
        "name": "network",
        "func": "var network = msg.payload\nflow.set('network',network);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar network = \"test\"\nflow.set('network',network);",
        "finalize": "",
        "x": 1420,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "107cf14e.b06d7f",
        "type": "debug",
        "z": "c24acee5.55115",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 340,
        "wires": []
    },
    {
        "id": "601c642.f33059c",
        "type": "debug",
        "z": "c24acee5.55115",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 400,
        "wires": []
    },
    {
        "id": "1b35241b.74fb2c",
        "type": "comment",
        "z": "c24acee5.55115",
        "name": "Bug - Cannot create more than 31 \\n Makes 1 more than requested - #00",
        "info": "",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "b2abbfc7.db2ea",
        "type": "debug",
        "z": "c24acee5.55115",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 100,
        "wires": []
    },
    {
        "id": "e6fb4e45.7764d",
        "type": "debug",
        "z": "c24acee5.55115",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "8b82cbc0.189d88",
        "type": "debug",
        "z": "c24acee5.55115",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "e22e931e.cc126",
        "type": "debug",
        "z": "c24acee5.55115",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 520,
        "wires": []
    },
    {
        "id": "b89318e8.fe7498",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Check Balances Example",
        "func": "const fetch = global.get(\"nodefetch\");\n\nvar StellarSdk = global.get(\"stellarsdk\");\n// create a completely new and unique pair of keys\n// see more about KeyPair objects: https://stellar.github.io/js-stellar-sdk/Keypair.html\nconst pair = StellarSdk.Keypair.random();\n\n//console.log(pair.secret());\nmsg.payload = \"Pair secret: \" + pair.secret()\nnode.send(msg)\n// SAV76USXIJOBMEQXPANUOQM6F5LIOTLPDIDVRJBFFE2MDJXG24TAPUU7\n//console.log(pair.publicKey());\nmsg.payload = \"Pair publickey: \" + pair.publicKey()\nnode.send(msg)\n// GCFXHS4GXL6BVUCXBWXGTITROWLVYXQKQLF4YH5O5JT3YZXCYPAFBJZB\nasync function main() {\n  try {\n    const response = await fetch(\n      `https://friendbot.stellar.org?addr=${encodeURIComponent(\n        pair.publicKey(),\n      )}`,\n    );\n    const responseJSON = await response.json();\n    console.log(\"SUCCESS! You have a new account :)\\n\", responseJSON);\n  } catch (e) {\n    console.log(\"ERROR!\", e);\n  }\n\nconst server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n// the JS SDK uses promises for most actions, such as retrieving an account\nconst account = await server.loadAccount(pair.publicKey());\n//console.log(\"Balances for account: \" + pair.publicKey());\nmsg.payload = \"Balances for account: \" + pair.publicKey()\nnode.send(msg)\naccount.balances.forEach(function (balance) {\n  //console.log(\"Type:\", balance.asset_type, \", Balance:\", balance.balance);\n  msg.payload = \"Type:\"+ balance.asset_type+\", Balance:\"+balance.balance\n  node.send(msg)\n});\n\n}\nmain()",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 340,
        "wires": [
            [
                "af22515e.f86d9",
                "da4a3f54.f4e15"
            ]
        ]
    },
    {
        "id": "b8e28e57.e51c9",
        "type": "inject",
        "z": "e1a3be1e.3571d",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "b89318e8.fe7498"
            ]
        ]
    },
    {
        "id": "af22515e.f86d9",
        "type": "debug",
        "z": "e1a3be1e.3571d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 820,
        "y": 344,
        "wires": []
    },
    {
        "id": "3a89629.ccdd39e",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Getting Acount data",
        "info": "we are getting below data in this node\n1. Pair secret\n2. Pair publickey\n3. Acount ID\n4. Type and Balance\n",
        "x": 510,
        "y": 300,
        "wires": []
    },
    {
        "id": "a3c0ca1e.f0f588",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Submit Transaction Example",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  msg.payload.sourceKeys,\n);\nvar destinationId = msg.payload.destinationId;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  .loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  .catch(function (error) {\n    if (error instanceof StellarSdk.NotFoundError) {\n      throw new Error(\"The destination account does not exist!\");\n    } else return error;\n  })\n  // If there was no error, load up-to-date information on your account.\n  .then(function () {\n    return server.loadAccount(sourceKeys.publicKey());\n  })\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: destinationId,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          asset: StellarSdk.Asset.native(),\n          amount: \"10\",\n        }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(\"Test Transaction\"))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload=result;\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 640,
        "wires": [
            [
                "22e0c241.59bd6e"
            ]
        ]
    },
    {
        "id": "a11e4603.4b7608",
        "type": "inject",
        "z": "e1a3be1e.3571d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sourceKeys\":\"SBSZQMYX2EAT6MGDOAJ3OONFHT6TVVWLLAZEESRIQ7G3CYLHTCWTC3UX\",\"destinationId\":\"GD5LYKVQZYHDNJ3QTEDX3EBF5XK3W5NADGTBT5KLD276OPP7YKDIQIBZ\"}",
        "payloadType": "json",
        "x": 290,
        "y": 640,
        "wires": [
            [
                "a3c0ca1e.f0f588"
            ]
        ]
    },
    {
        "id": "22e0c241.59bd6e",
        "type": "debug",
        "z": "e1a3be1e.3571d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 870,
        "y": 640,
        "wires": []
    },
    {
        "id": "4dadf59d.58b25c",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Transactions",
        "info": "",
        "x": 490,
        "y": 600,
        "wires": []
    },
    {
        "id": "bd5ddba4.6459b8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Create Sell Offer Example",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  msg.payload.secretKey,\n);\nvar destinationId = msg.payload.sourceAccount;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  .loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  .catch(function (error) {\n    if (error instanceof StellarSdk.NotFoundError) {\n      throw new Error(\"The destination account does not exist!\");\n    } else return error;\n  })\n  // If there was no error, load up-to-date information on your account.\n  .then(function () {\n    return server.loadAccount(sourceKeys.publicKey());\n  })\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(msg.payload.assetToBuy, 'GD5LYKVQZYHDNJ3QTEDX3EBF5XK3W5NADGTBT5KLD276OPP7YKDIQIBZ'),\n            buying: new StellarSdk.Asset(msg.payload.assetToSell, 'GD5LYKVQZYHDNJ3QTEDX3EBF5XK3W5NADGTBT5KLD276OPP7YKDIQIBZ'),\n            amount: msg.payload.amount,\n            price: msg.payload.price\n     }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(\"Test Transaction\"))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload = result;\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "97321eb4.c24ae"
            ]
        ]
    },
    {
        "id": "70431d01.f653b4",
        "type": "inject",
        "z": "e1a3be1e.3571d",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "{\"secretKey\":\"SBSZQMYX2EAT6MGDOAJ3OONFHT6TVVWLLAZEESRIQ7G3CYLHTCWTC3UX\",\"sourceAccount\":\"GD5LYKVQZYHDNJ3QTEDX3EBF5XK3W5NADGTBT5KLD276OPP7YKDIQIBZ\",\"assetToSell\":\"XLM\",\"assetToBuy\":\"XCN\",\"amount\":\"0.1\",\"price\":\"2.5\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"secretKey\":\"SBSZQMYX2EAT6MGDOAJ3OONFHT6TVVWLLAZEESRIQ7G3CYLHTCWTC3UX\",\"sourceAccount\":\"GD5LYKVQZYHDNJ3QTEDX3EBF5XK3W5NADGTBT5KLD276OPP7YKDIQIBZ\",\"assetToSell\":\"XLM\",\"assetToBuy\":\"XCN\",\"amount\":\"0.1\",\"price\":\"2.5\"}",
        "payloadType": "json",
        "x": 240,
        "y": 1040,
        "wires": [
            [
                "bd5ddba4.6459b8"
            ]
        ]
    },
    {
        "id": "97321eb4.c24ae",
        "type": "debug",
        "z": "e1a3be1e.3571d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 690,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e71f8c00.f6d8c",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Create offer",
        "info": "",
        "x": 420,
        "y": 1000,
        "wires": []
    },
    {
        "id": "da4a3f54.f4e15",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "1f563092.450a6f",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "balances result",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 970,
        "y": 504,
        "wires": []
    },
    {
        "id": "d502f1d0.d9b54",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Public Key",
        "label": "Public Key",
        "tooltip": "",
        "group": "1f563092.450a6f",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "",
        "x": 300,
        "y": 464,
        "wires": [
            [
                "db84dba9.bca098"
            ]
        ]
    },
    {
        "id": "db84dba9.bca098",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Check Balances",
        "func": "const fetch = global.get(\"nodefetch\");\n\nvar StellarSdk = global.get(\"stellarsdk\");\n// create a completely new and unique pair of keys\n// see more about KeyPair objects: https://stellar.github.io/js-stellar-sdk/Keypair.html\nconst key = msg.payload;\n\n\nconst server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n// the JS SDK uses promises for most actions, such as retrieving an account\nconst account = await server.loadAccount(key);\n//console.log(\"Balances for account: \" + pair.publicKey());\nmsg.topic = \"Balances for account: \" + key\n\nvar bals = \"\";\n\naccount.balances.forEach(function (balance) {\n  console.log(\"Type:\", balance.asset_type, \", Balance:\", balance.balance);\n  msg.payload = \"Type: \"+ balance.asset_code+\", Balance: \"+balance.balance+\" \\n \"\n  //node.send(msg)\n  bals = bals +\" \"+ msg.payload\n});\n\nmsg.payload = bals\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 464,
        "wires": [
            [
                "af22515e.f86d9",
                "f8487bed.a46548",
                "da4a3f54.f4e15"
            ]
        ]
    },
    {
        "id": "f8487bed.a46548",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "1f563092.450a6f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Balances header",
        "label": "",
        "format": "{{msg.topic}}",
        "layout": "row-spread",
        "x": 980,
        "y": 464,
        "wires": []
    },
    {
        "id": "f4395daf.f79f",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Secret Key",
        "label": "Secret Key",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1170,
        "y": 660,
        "wires": [
            [
                "8f06f558.bec918"
            ]
        ]
    },
    {
        "id": "612720db.4ada1",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "c3c52113.338a9",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 960,
        "y": 760,
        "wires": []
    },
    {
        "id": "7c7247d3.5c6e18",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "c3c52113.338a9",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Submitting text display",
        "label": "",
        "format": "{{msg.topic}}",
        "layout": "row-spread",
        "x": 960,
        "y": 700,
        "wires": []
    },
    {
        "id": "53c77e9d.d066c",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Submit XLM Transaction",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar secret = flow.get('secret',secret);\nvar dest = flow.get('dest',dest);\nvar quantxlm = flow.get('quantxlm',quantxlm);\nvar asset = flow.get('asset',asset);\nvar assetiss = flow.get('assetiss',assetiss);\nvar memo = flow.get('memo',memo);\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secret);\nvar destinationId = dest;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  .loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  .catch(function (error) {\n    if (error instanceof StellarSdk.NotFoundError) {\n      throw new Error(\"The destination account does not exist!\");\n    } else return error;\n  })\n  // If there was no error, load up-to-date information on your account.\n  .then(function () {\n    return server.loadAccount(sourceKeys.publicKey());\n  })\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: destinationId,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          asset: StellarSdk.Asset.native(),\n          //asset: new StellarSdk.Asset(asset,assetiss),\n          amount: quantxlm,\n        }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(memo))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 760,
        "wires": [
            [
                "612720db.4ada1",
                "3d4c67b3.a92678",
                "22e0c241.59bd6e"
            ]
        ]
    },
    {
        "id": "3dfa8625.6156ba",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Destination",
        "label": "Destination",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1170,
        "y": 700,
        "wires": [
            [
                "92407a93.e8b6d8"
            ]
        ]
    },
    {
        "id": "1eda8ae2.afb005",
        "type": "ui_button",
        "z": "e1a3be1e.3571d",
        "name": "SendXLM",
        "group": "c3c52113.338a9",
        "order": 5,
        "width": "12",
        "height": "1",
        "passthru": false,
        "label": "Send XLM",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 260,
        "y": 720,
        "wires": [
            [
                "53c77e9d.d066c",
                "556ecdd.dc6c434",
                "e169c03a.d0b74"
            ]
        ]
    },
    {
        "id": "8f06f558.bec918",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "secret",
        "func": "var secret = msg.payload\nflow.set('secret',secret);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "54fb998a.fa6258",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Amount",
        "label": "Amount",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1160,
        "y": 820,
        "wires": [
            [
                "f966427f.c21df"
            ]
        ]
    },
    {
        "id": "92407a93.e8b6d8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "dest",
        "func": "var dest = msg.payload\nflow.set('dest',dest);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "f966427f.c21df",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "quant",
        "func": "var quant = msg.payload\nflow.set('quant',quant);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "556ecdd.dc6c434",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sending Transaction To Stellar",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 680,
        "wires": [
            [
                "7c7247d3.5c6e18"
            ]
        ]
    },
    {
        "id": "e169c03a.d0b74",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 720,
        "wires": [
            [
                "612720db.4ada1"
            ]
        ]
    },
    {
        "id": "3d4c67b3.a92678",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 700,
        "wires": [
            [
                "7c7247d3.5c6e18"
            ]
        ]
    },
    {
        "id": "2840c9e9.a1c026",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Secret Key",
        "label": "Secret Key",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1110,
        "y": 1080,
        "wires": [
            [
                "3898033b.99490c"
            ]
        ]
    },
    {
        "id": "aa46f17e.ea646",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Asset to sell - Name",
        "label": "Asset to sell - Name",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1140,
        "y": 1120,
        "wires": [
            [
                "927ca549.c33d18"
            ]
        ]
    },
    {
        "id": "5e865db9.a1c1a4",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Amount",
        "label": "Amount",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1100,
        "y": 1200,
        "wires": [
            [
                "f43002bd.b5b33"
            ]
        ]
    },
    {
        "id": "abbec0bf.506d5",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Price",
        "label": "Price",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 7,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1090,
        "y": 1320,
        "wires": [
            [
                "ffc80450.9992e8"
            ]
        ]
    },
    {
        "id": "e4e61f7.debe1e",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Asset to buy - Name",
        "label": "Asset to buy - Name",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 5,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1140,
        "y": 1240,
        "wires": [
            [
                "51ad1713.cc50f8"
            ]
        ]
    },
    {
        "id": "3898033b.99490c",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "secret2",
        "func": "var secret2 = msg.payload\nflow.set('secret2',secret2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1320,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "927ca549.c33d18",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "sell",
        "func": "var sell = msg.payload\nflow.set('sell',sell);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "f43002bd.b5b33",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "quant2",
        "func": "var quant2 = msg.payload\nflow.set('quant2',quant2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "7152c22e.cb5abc",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "ad15b2e3.60848",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 880,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c47bf282.6e658",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "ad15b2e3.60848",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "Submitting text display",
        "label": "",
        "format": "{{msg.topic}}",
        "layout": "row-spread",
        "x": 880,
        "y": 1120,
        "wires": []
    },
    {
        "id": "93f4704e.26401",
        "type": "ui_button",
        "z": "e1a3be1e.3571d",
        "name": "Submit Offer",
        "group": "ad15b2e3.60848",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Submit Offer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 150,
        "y": 1160,
        "wires": [
            [
                "2d7986f6.bee62a",
                "5e0a51c1.b1e61",
                "526f7526.dc05cc"
            ]
        ]
    },
    {
        "id": "2d7986f6.bee62a",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Sending Transaction To Stellar",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1120,
        "wires": [
            [
                "c47bf282.6e658"
            ]
        ]
    },
    {
        "id": "5e0a51c1.b1e61",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "7152c22e.cb5abc"
            ]
        ]
    },
    {
        "id": "8629d5eb.2e4d08",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1140,
        "wires": [
            [
                "c47bf282.6e658"
            ]
        ]
    },
    {
        "id": "51ad1713.cc50f8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "buy",
        "func": "var buy = msg.payload\nflow.set('buy',buy);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "ffc80450.9992e8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "price2",
        "func": "var price2 = msg.payload\nflow.set('price2',price2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "2d7d4507.02854a",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Create Sell Offer",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar secret2 = flow.get('secret2',secret2);\nvar sell = flow.get('sell',sell);\nvar selliss = flow.get('selliss',selliss);\nvar quant2 = flow.get('quant2',quant2);\nvar buy = flow.get('buy',buy);\nvar buyiss = flow.get('buyiss',buyiss);\nvar price2 = flow.get('price2',price2);\nvar memo = flow.get('memo',memo)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  secret2,\n);\n//var destinationId = msg.payload.sourceAccount;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  //.loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  //.catch(function (error) {\n   // if (error instanceof StellarSdk.NotFoundError) {\n  //    throw new Error(\"The destination account does not exist!\");\n  //  } else return error;\n // })\n  // If there was no error, load up-to-date information on your account.\n  .loadAccount(sourceKeys.publicKey())\n  \n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(sell,selliss),\n            buying: new StellarSdk.Asset(buy,buyiss),\n            amount: quant2,\n            price: price2\n     }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(memo))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload = \"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "8629d5eb.2e4d08",
                "7152c22e.cb5abc",
                "97321eb4.c24ae"
            ]
        ]
    },
    {
        "id": "76d3ad49.5636e4",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Asset to sell - Issuer",
        "label": "Asset to sell - Issuer",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1140,
        "y": 1160,
        "wires": [
            [
                "cbf65520.e52ae8"
            ]
        ]
    },
    {
        "id": "cbf65520.e52ae8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "selliss",
        "func": "var selliss = msg.payload\nflow.set('selliss',selliss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "74c60b94.5294a4",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Asset to buy - Issuer",
        "label": "Asset to buy - Issuer",
        "tooltip": "",
        "group": "ad15b2e3.60848",
        "order": 6,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1140,
        "y": 1280,
        "wires": [
            [
                "aa44702b.3e9dc"
            ]
        ]
    },
    {
        "id": "aa44702b.3e9dc",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "buyiss",
        "func": "var buyiss = msg.payload\nflow.set('buyiss',buyiss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "c072723e.205b6",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Asset",
        "label": "Asset",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 6,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1150,
        "y": 740,
        "wires": [
            [
                "9c0857b6.dbadb8"
            ]
        ]
    },
    {
        "id": "aff7e18b.d3b58",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Issuer",
        "label": "Issuer",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 7,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1150,
        "y": 780,
        "wires": [
            [
                "cf2df40c.68c5e8"
            ]
        ]
    },
    {
        "id": "9c0857b6.dbadb8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "asset",
        "func": "var asset = msg.payload\nflow.set('asset',asset);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "cf2df40c.68c5e8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "assetiss",
        "func": "var assetiss = msg.payload\nflow.set('assetiss',assetiss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "934d0b5.19807f8",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "AmountXLM",
        "label": "AmountXLM",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1170,
        "y": 860,
        "wires": [
            [
                "66fb5342.5d2e8c"
            ]
        ]
    },
    {
        "id": "66fb5342.5d2e8c",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "quantxlm",
        "func": "var quantxlm = msg.payload\nflow.set('quantxlm',quantxlm);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "272d2dc.785acd2",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Submit Token Transaction",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar secret = flow.get('secret',secret);\nvar dest = flow.get('dest',dest);\nvar quant = flow.get('quant',quant);\nvar asset = flow.get('asset',asset);\nvar assetiss = flow.get('assetiss',assetiss);\nvar memo = flow.get('memo',memo);\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secret);\nvar destinationId = dest;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  .loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  .catch(function (error) {\n    if (error instanceof StellarSdk.NotFoundError) {\n      throw new Error(\"The destination account does not exist!\");\n    } else return error;\n  })\n  // If there was no error, load up-to-date information on your account.\n  .then(function () {\n    return server.loadAccount(sourceKeys.publicKey());\n  })\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: destinationId,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          //asset: StellarSdk.Asset.native(),\n          asset: new StellarSdk.Asset(asset,assetiss),\n          amount: quant,\n        }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(memo))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "612720db.4ada1",
                "3d4c67b3.a92678",
                "22e0c241.59bd6e"
            ]
        ]
    },
    {
        "id": "6ad7ac1d.5167d4",
        "type": "ui_button",
        "z": "e1a3be1e.3571d",
        "name": "Send Token",
        "group": "c3c52113.338a9",
        "order": 9,
        "width": "12",
        "height": "1",
        "passthru": false,
        "label": "Send Token",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 270,
        "y": 820,
        "wires": [
            [
                "272d2dc.785acd2",
                "556ecdd.dc6c434",
                "e169c03a.d0b74"
            ]
        ]
    },
    {
        "id": "9d11e5eb.cc4cd8",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Stellar Testnet Nodes UI",
        "info": "",
        "x": 710,
        "y": 40,
        "wires": []
    },
    {
        "id": "92c8f2ca.8ab9",
        "type": "debug",
        "z": "e1a3be1e.3571d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b0981b7e.d17f08",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "return keypair",
        "func": "const fetch = global.get(\"nodefetch\");\n\nvar StellarSdk = global.get(\"stellarsdk\");\n// create a completely new and unique pair of keys\n// see more about KeyPair objects: https://stellar.github.io/js-stellar-sdk/Keypair.html\nconst pair = StellarSdk.Keypair.random();\n\n//console.log(pair.secret());\nmsg.payload = \"Pair secret: \" + pair.secret()\nnode.send(msg)\n// SAV76USXIJOBMEQXPANUOQM6F5LIOTLPDIDVRJBFFE2MDJXG24TAPUU7\n//console.log(pair.publicKey());\nmsg.payload = \"Pair publickey: \" + pair.publicKey()\nnode.send(msg)\n// GCFXHS4GXL6BVUCXBWXGTITROWLVYXQKQLF4YH5O5JT3YZXCYPAFBJZB\nasync function main() {\n  try {\n    const response = await fetch(\n      `https://friendbot.stellar.org?addr=${encodeURIComponent(\n        pair.publicKey(),\n      )}`,\n    );\n    const responseJSON = await response.json();\n    console.log(\"SUCCESS! You have a new account :)\\n\", responseJSON);\n  } catch (e) {\n    console.log(\"ERROR!\", e);\n  }\n\n\n}\nmain()\n\nmsg.payload=pair.secret();\n\nmsg.topic=pair.publicKey();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1440,
        "wires": [
            [
                "92c8f2ca.8ab9",
                "34ac11cd.c3526e",
                "ecfb7374.44af1",
                "1ad19401.84821c",
                "83bb5b0f.152ab8"
            ]
        ]
    },
    {
        "id": "624f9c80.dc78c4",
        "type": "ui_button",
        "z": "e1a3be1e.3571d",
        "name": "",
        "group": "a947341d.96f6c8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "generate keypair",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 220,
        "y": 1440,
        "wires": [
            [
                "b0981b7e.d17f08"
            ]
        ]
    },
    {
        "id": "34ac11cd.c3526e",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "a947341d.96f6c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Public",
        "label": "Public",
        "format": "{{msg.topic}}",
        "layout": "col-center",
        "x": 710,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ecfb7374.44af1",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "a947341d.96f6c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Secret",
        "label": "Secret",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 710,
        "y": 1500,
        "wires": []
    },
    {
        "id": "b647e0dc.6b95",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Generate Keypair",
        "info": "",
        "x": 400,
        "y": 1380,
        "wires": []
    },
    {
        "id": "d962cf07.e380e",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Store Variables from Dashboard UI",
        "info": "",
        "x": 1300,
        "y": 620,
        "wires": []
    },
    {
        "id": "9dd241e6.50e0f",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Store Variables from Dashboard UI",
        "info": "",
        "x": 1200,
        "y": 1040,
        "wires": []
    },
    {
        "id": "99256bbb.9268d8",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "a947341d.96f6c8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 760,
        "y": 1540,
        "wires": []
    },
    {
        "id": "83bb5b0f.152ab8",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Success! Account funded by friendbot (can take up to 30s to show up)",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1540,
        "wires": [
            [
                "99256bbb.9268d8"
            ]
        ]
    },
    {
        "id": "1ad19401.84821c",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Show link",
        "func": "msg.payload=\"https://stellar.expert/explorer/testnet/account/\"+msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 1580,
        "wires": [
            [
                "d275c496.6c1888"
            ]
        ]
    },
    {
        "id": "d275c496.6c1888",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "a947341d.96f6c8",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Link text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 740,
        "y": 1580,
        "wires": []
    },
    {
        "id": "85865e9a.bf4e7",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Memo",
        "label": "Memo",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "x": 1150,
        "y": 900,
        "wires": [
            [
                "6c85e277.80215c"
            ]
        ]
    },
    {
        "id": "6c85e277.80215c",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "memo",
        "func": "var memo = msg.payload\nflow.set('memo',memo);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar memo = \"Via BlockShangerous NodeRed\"\nflow.set('memo',memo);",
        "finalize": "",
        "x": 1410,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "39c5a94b.239ff6",
        "type": "debug",
        "z": "e1a3be1e.3571d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1780,
        "wires": []
    },
    {
        "id": "7117e897.ba00a8",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "add trust",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar secret = flow.get('secret',secret);\nvar asset = flow.get('asset',asset);\nvar assetiss = flow.get('assetiss',assetiss);\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secret);\n//var destinationId = recipient;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.changeTrust({\n          //destination: destinationId,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          //asset: StellarSdk.Asset.native(),\n          asset: new StellarSdk.Asset(asset,assetiss),\n          //amount: amount,\n        }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text('Trust in StellarRed'))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "39c5a94b.239ff6",
                "9628b69f.1117b8"
            ]
        ]
    },
    {
        "id": "5878cc21.fcda44",
        "type": "inject",
        "z": "e1a3be1e.3571d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SDVO2J7XOJYWWYC3XCTKW26S7XVO5BMYKRQSOV43USOKM33TWG4ATAOP",
        "payloadType": "str",
        "x": 180,
        "y": 1780,
        "wires": [
            [
                "7117e897.ba00a8"
            ]
        ]
    },
    {
        "id": "fcb8c9ab.b33aa8",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Add Trustline",
        "info": "",
        "x": 330,
        "y": 1720,
        "wires": []
    },
    {
        "id": "d7178576.80ea38",
        "type": "debug",
        "z": "e1a3be1e.3571d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 2060,
        "wires": []
    },
    {
        "id": "3fe7ed32.0807f2",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "return public from secret",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar secret = msg.payload;\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secret);\nmsg.payload=sourceKeys.publicKey()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 2060,
        "wires": [
            [
                "d7178576.80ea38",
                "483638e4.a24a98"
            ]
        ]
    },
    {
        "id": "b6d5dabc.94b738",
        "type": "inject",
        "z": "e1a3be1e.3571d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SATY6XOPDHWSMPTYICPDKQEEHNRSDFLM472AKDYYIBJVZFLSYHKHSY7F",
        "payloadType": "str",
        "x": 160,
        "y": 2060,
        "wires": [
            [
                "3fe7ed32.0807f2"
            ]
        ]
    },
    {
        "id": "311db771.2e6ad8",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "Get Public",
        "info": "",
        "x": 300,
        "y": 2000,
        "wires": []
    },
    {
        "id": "8ded31f.251b9d",
        "type": "ui_button",
        "z": "e1a3be1e.3571d",
        "name": "Get Public",
        "group": "c3c52113.338a9",
        "order": 16,
        "width": "12",
        "height": "1",
        "passthru": false,
        "label": "Get Public",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 2120,
        "wires": [
            [
                "dcdb9738.89dda8"
            ]
        ]
    },
    {
        "id": "483638e4.a24a98",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "c3c52113.338a9",
        "order": 17,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 660,
        "y": 2120,
        "wires": []
    },
    {
        "id": "dcdb9738.89dda8",
        "type": "ui_text_input",
        "z": "e1a3be1e.3571d",
        "name": "Secret Key",
        "label": "Secret Key",
        "tooltip": "",
        "group": "c3c52113.338a9",
        "order": 15,
        "width": "0",
        "height": "0",
        "passthru": false,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 330,
        "y": 2180,
        "wires": [
            [
                "3fe7ed32.0807f2"
            ]
        ]
    },
    {
        "id": "5a0ed23.947082c",
        "type": "ui_button",
        "z": "e1a3be1e.3571d",
        "name": "Add Trust",
        "group": "c3c52113.338a9",
        "order": 12,
        "width": "12",
        "height": "1",
        "passthru": false,
        "label": "Add Trust",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 1840,
        "wires": [
            [
                "7117e897.ba00a8",
                "afd70817.be9848"
            ]
        ]
    },
    {
        "id": "9628b69f.1117b8",
        "type": "ui_text",
        "z": "e1a3be1e.3571d",
        "group": "c3c52113.338a9",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 660,
        "y": 1840,
        "wires": []
    },
    {
        "id": "afd70817.be9848",
        "type": "change",
        "z": "e1a3be1e.3571d",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sending Transaction To Stellar",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1840,
        "wires": [
            [
                "9628b69f.1117b8"
            ]
        ]
    },
    {
        "id": "746f6a90.d62e74",
        "type": "comment",
        "z": "e1a3be1e.3571d",
        "name": "THIS IS AN EXPERIMENTAL BETA. IF YOU CHOOSE TO USE IT ON MAINNET YOU DO SO AT YOUR OWN RISK. \\n BE CAREFUL. \\n THIS IS NOT READY FOR MAINNET DEPLOYMENT. YOU'VE BEEN WARNED. \\n There is currently no methodology for handling errors from the Stellar network. \\n If you cannot figure out why something isn't working I recommend exporting the tx as an XDR and inputting that in the Stellar Laboratory",
        "info": "",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "27169a60.95b296",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Create Sell Offer",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar secret2 = flow.get('secret2',secret2);\nvar sell = flow.get('sell',sell);\nvar selliss = flow.get('selliss',selliss);\nvar quant2 = flow.get('quant2',quant2);\nvar buy = flow.get('buy',buy);\nvar buyiss = flow.get('buyiss',buyiss);\nvar price2 = flow.get('price2',price2);\nvar memo = flow.get('memo',memo)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  secret2,\n);\n//var destinationId = msg.payload.sourceAccount;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  //.loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  //.catch(function (error) {\n   // if (error instanceof StellarSdk.NotFoundError) {\n  //    throw new Error(\"The destination account does not exist!\");\n  //  } else return error;\n // })\n  // If there was no error, load up-to-date information on your account.\n  .loadAccount(sourceKeys.publicKey())\n  \n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset.native(),\n            buying: new StellarSdk.Asset(buy,buyiss),\n            amount: quant2,\n            price: price2\n     }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(memo))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload = \"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "7152c22e.cb5abc",
                "97321eb4.c24ae",
                "8629d5eb.2e4d08"
            ]
        ]
    },
    {
        "id": "45f65ad4.bc2c34",
        "type": "function",
        "z": "e1a3be1e.3571d",
        "name": "Create Sell Offer",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar secret2 = flow.get('secret2',secret2);\nvar sell = flow.get('sell',sell);\nvar selliss = flow.get('selliss',selliss);\nvar quant2 = flow.get('quant2',quant2);\nvar buy = flow.get('buy',buy);\nvar buyiss = flow.get('buyiss',buyiss);\nvar price2 = flow.get('price2',price2);\nvar memo = flow.get('memo',memo)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  secret2,\n);\n//var destinationId = msg.payload.sourceAccount;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  //.loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  //.catch(function (error) {\n   // if (error instanceof StellarSdk.NotFoundError) {\n  //    throw new Error(\"The destination account does not exist!\");\n  //  } else return error;\n // })\n  // If there was no error, load up-to-date information on your account.\n  .loadAccount(sourceKeys.publicKey())\n  \n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(sell,selliss),\n            buying: new StellarSdk.Asset.native(),\n            amount: quant2,\n            price: price2\n     }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(memo))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload = \"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    console.error(\"Something went wrong!\", error);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 1280,
        "wires": [
            [
                "7152c22e.cb5abc",
                "97321eb4.c24ae",
                "8629d5eb.2e4d08"
            ]
        ]
    },
    {
        "id": "526f7526.dc05cc",
        "type": "switch",
        "z": "e1a3be1e.3571d",
        "name": "sell check",
        "property": "sell",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "XLM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "XLM",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 120,
        "y": 1260,
        "wires": [
            [
                "3c738c9e.e8b194"
            ],
            [
                "27169a60.95b296"
            ]
        ]
    },
    {
        "id": "3c738c9e.e8b194",
        "type": "switch",
        "z": "e1a3be1e.3571d",
        "name": "buy check",
        "property": "buy",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "XLM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "XLM",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 1300,
        "wires": [
            [
                "2d7d4507.02854a"
            ],
            [
                "45f65ad4.bc2c34"
            ]
        ]
    },
    {
        "id": "c8113d06.878b5",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "77866822.182798",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar secretbuy = flow.get('secretbuy',secretbuy);\n//var asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar assetiss = sourceKeys.publicKey()\n//flow.set('assetiss',assetiss)\n\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "c8113d06.878b5",
                "f9c196a6.c7c228"
            ]
        ]
    },
    {
        "id": "d7e1e2d1.15ee6",
        "type": "inject",
        "z": "a0cdded1.a335c",
        "name": "",
        "props": [
            {
                "p": "price",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "77866822.182798"
            ]
        ]
    },
    {
        "id": "6227b87d.13f9e8",
        "type": "ui_button",
        "z": "a0cdded1.a335c",
        "name": "Match sell offer",
        "group": "b7bc8c2.90c527",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Match sell offer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": " ",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "27bbad5a.457182",
                "8d7a3d23.2b2e4"
            ]
        ]
    },
    {
        "id": "e92ac601.f7b2e8",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1640,
        "y": 600,
        "wires": []
    },
    {
        "id": "27bbad5a.457182",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Building Tx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "8fec78d.d698588",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "cdec65c5.8444f8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "allow trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = flow.get('secretiss',secretiss);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar secretbuy = flow.get('secretbuy',secretbuy);\nvar buyerkeypair = StellarSdk.Keypair.fromSecret(secretbuy);\nvar publicbuyer = buyerkeypair.publicKey()\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nserver\n  .loadAccount(buyerkeypair.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.setTrustLineFlags({\n          trustor: publicbuyer,\n          asset: new StellarSdk.Asset(nftname,nftiss),\n          flags: {authorized:true},\n          source: sourceKeys.publicKey()\n        }),\n      )\n     \n      \n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 340,
        "wires": [
            [
                "9dd04450.ce0c88",
                "fcf99cb7.6fdfd"
            ]
        ]
    },
    {
        "id": "f9e38c.d54d0c78",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 220,
        "wires": []
    },
    {
        "id": "fad0966f.901cb8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sign and submit",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretbuy = flow.get('secretbuy',secretbuy);\nvar secretiss = flow.get('secretiss',secretiss);\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar sourceKeys2 = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n    \n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text('NFT by RoyalT'))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    transaction.sign(sourceKeys2);\n    // And finally, send it off to Stellar!\n    msg.xdr=transaction.toEnvelope().toXDR('base64')\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg)\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.payload=\"Something went wrong! \"+ error;\n    node.send(msg);\n    //msg.send(msg)\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "dfbafc4b.482e",
                "6a5f0c9f.008964",
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "dfbafc4b.482e",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 360,
        "wires": []
    },
    {
        "id": "6a5f0c9f.008964",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 420,
        "wires": []
    },
    {
        "id": "9dd04450.ce0c88",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "match offer",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretbuy = flow.get('secretbuy',secretbuy);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\nmsg.issuer=nftiss\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar transaction;\n\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.manageBuyOffer({\n            selling: new StellarSdk.Asset.native(),\n            buying: new StellarSdk.Asset(nftname,nftiss),\n            buyAmount: \".0000001\",\n            price: msg.price\n     }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 380,
        "wires": [
            [
                "93f3c50c.9633f8",
                "ff753feb.10ba6"
            ]
        ]
    },
    {
        "id": "d2d12a4a.e96198",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "NFT - Name",
        "label": "NFT - Name",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1250,
        "y": 800,
        "wires": [
            [
                "8afe2867.dcfd28"
            ]
        ]
    },
    {
        "id": "19cb4b58.344585",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key - Buyer",
        "label": "Secret Key - Buyer",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1270,
        "y": 760,
        "wires": [
            [
                "1bfef25c.47228e"
            ]
        ]
    },
    {
        "id": "74d1f21b.da995c",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "NFT Issuer",
        "label": "NFT Issuer",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1250,
        "y": 720,
        "wires": [
            [
                "cd9c7b41.404cb8"
            ]
        ]
    },
    {
        "id": "cd9c7b41.404cb8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "nftiss",
        "func": "var nftiss = msg.payload\nflow.set('nftiss',nftiss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 720,
        "wires": [
            [
                "9ae6c7fc.469ca8"
            ]
        ]
    },
    {
        "id": "8afe2867.dcfd28",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "nftname",
        "func": "var nftname = msg.payload\nflow.set('nftname',nftname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 800,
        "wires": [
            [
                "9ae6c7fc.469ca8"
            ]
        ]
    },
    {
        "id": "1bfef25c.47228e",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secretbuy",
        "func": "var secretbuy = msg.payload\nflow.set('secretbuy',secretbuy);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "fcf99cb7.6fdfd",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 280,
        "wires": []
    },
    {
        "id": "af004690.5fb738",
        "type": "ui_dropdown",
        "z": "a0cdded1.a335c",
        "name": "",
        "label": "Network",
        "tooltip": "",
        "place": "Test",
        "group": "b7bc8c2.90c527",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Test",
                "value": "test",
                "type": "str"
            },
            {
                "label": "Public",
                "value": "public",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 1240,
        "y": 880,
        "wires": [
            [
                "74abf04f.2f5b8",
                "20a69217.bd378e"
            ]
        ]
    },
    {
        "id": "74abf04f.2f5b8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "network",
        "func": "var network = msg.payload\nflow.set('network',network);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar network = \"test\"\nflow.set('network',network);",
        "finalize": "",
        "x": 1500,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a6e8b8fa.dfdf18",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon.stellar.org\");\nvar secretbuy = flow.get('secretbuy',secretbuy);\n//var asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar assetiss = sourceKeys.publicKey()\n//flow.set('assetiss',assetiss)\n\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.PUBLIC,\n    })\n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 440,
        "wires": [
            [
                "f9c196a6.c7c228"
            ]
        ]
    },
    {
        "id": "8d7a3d23.2b2e4",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Switch",
        "property": "network",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "77866822.182798"
            ],
            [
                "a6e8b8fa.dfdf18"
            ]
        ]
    },
    {
        "id": "1f561b.7834a9e6",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Mainnet",
        "info": "",
        "x": 450,
        "y": 480,
        "wires": []
    },
    {
        "id": "5f1de83b.f86bf8",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Display",
        "info": "",
        "x": 1410,
        "y": 460,
        "wires": []
    },
    {
        "id": "ddfef779.dbebf8",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Match sell offer",
        "info": "",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "f9c196a6.c7c228",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get price",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n\nserver\n  .orderbook(\n    \n    new StellarSdk.Asset(\n      nftname,\n      nftiss,\n    ),\n    new StellarSdk.Asset.native(),\n  )\n  .call()\n  .then(function (resp) {\n   // console.log(resp);\n    //msg.book=resp\n    //msg.payload=resp\n    msg.price=resp.asks[0].price\n    //msg.price=1/msg.price\n    node.send(msg)\n  })\n\n    .then(function (resp) {\n   \n    })\n     //flow.set('transaction',transaction);\n     // node.send(msg)\n   // return server.submitTransaction(transaction);\n // })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "8fec78d.d698588",
                "fa2c6781.1dcb78"
            ]
        ]
    },
    {
        "id": "945a0d75.31a0f",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key - Issuer",
        "label": "Secret Key - Issuer",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1270,
        "y": 680,
        "wires": [
            [
                "86d092ac.1fa88"
            ]
        ]
    },
    {
        "id": "86d092ac.1fa88",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secretiss",
        "func": "var secretiss = msg.payload\nflow.set('secretiss',secretiss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "fa2c6781.1dcb78",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "add trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\n\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\nvar secretbuy = flow.get('secretbuy',secretbuy);\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.changeTrust({\n          asset: new StellarSdk.Asset(nftname,nftiss),\n          //source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "f9e38c.d54d0c78",
                "cdec65c5.8444f8"
            ]
        ]
    },
    {
        "id": "ab4d5a66.585f58",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "send royalty",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\n\nvar secretbuy = flow.get('secretbuy',secretbuy);\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar transaction;\n\nvar royaltyamount=msg.price*.000000001*msg.royalty\nroyaltyamount=royaltyamount.toFixed(7)\nflow.set('royaltyamount',royaltyamount)\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: msg.recipient,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          asset: StellarSdk.Asset.native(),\n          amount: royaltyamount.toString(),\n          //source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "fad0966f.901cb8",
                "df4046f5.a16d98"
            ]
        ]
    },
    {
        "id": "93f3c50c.9633f8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "df4046f5.a16d98",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 360,
        "wires": []
    },
    {
        "id": "efca7ba.205e488",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get price",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n\nserver\n  .orderbook(\n    \n    new StellarSdk.Asset(\n      nftname,\n      nftiss,\n    ),\n    new StellarSdk.Asset.native(),\n  )\n  .call()\n  .then(function (resp) {\n   // console.log(resp);\n    msg.book=resp\n    //msg.payload=resp\n    \n  })\n\n    .then(function (resp) {\n    msg.price=msg.book.bids[0].price\n    msg.price=1/msg.price\n    node.send(msg)\n    })\n     //flow.set('transaction',transaction);\n     // node.send(msg)\n   // return server.submitTransaction(transaction);\n // })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b01b584e.edf9a8",
        "type": "inject",
        "z": "a0cdded1.a335c",
        "name": "",
        "props": [
            {
                "p": "secret",
                "v": "SBSZQMYX2EAT6MGDOAJ3OONFHT6TVVWLLAZEESRIQ7G3CYLHTCWTC3UX",
                "vt": "str"
            },
            {
                "p": "name",
                "v": "COOL",
                "vt": "str"
            },
            {
                "p": "iss",
                "v": "GBN5VTPXODILAQTMMB23ML5B7RKF657YXXALLWFKGZPSW53QGR6OUG4L",
                "vt": "str"
            },
            {
                "p": "op",
                "v": "changeTrust",
                "vt": "str"
            },
            {
                "p": "dest",
                "v": "GAC4LTCWBQAVRNXP67QMT55KZ3BIYPVMLIC46FYSO6HN2ZFZLFKW5WJX",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "d6670d1b.af221"
            ]
        ]
    },
    {
        "id": "4f0ef700.07bd58",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Create Multiple NFTs",
        "info": "",
        "x": 330,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4d5ea965.4991e8",
        "type": "ui_button",
        "z": "a0cdded1.a335c",
        "name": "Create NFTs",
        "group": "f36459ea.16b5d8",
        "order": 11,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Create NFTs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 80,
        "y": 1260,
        "wires": [
            [
                "474f15b9.c25eec",
                "dea4f2dd.89709"
            ]
        ]
    },
    {
        "id": "e305fdc2.c840c",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Asset - Name",
        "label": "Asset - Name",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1120,
        "y": 1640,
        "wires": [
            [
                "c204293f.2ec3f8"
            ]
        ]
    },
    {
        "id": "535e4bfa.b73244",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Amount",
        "label": "Amount (max 30)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 5,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "b0d2d133.92e0c"
            ]
        ]
    },
    {
        "id": "aaa14c36.4aa31",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key - Origin",
        "label": "Secret Key - Origin",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1130,
        "y": 1600,
        "wires": [
            [
                "eb773540.4a50e8"
            ]
        ]
    },
    {
        "id": "d415be5c.0174c",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Data",
        "label": "Data (IPFS CID)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1090,
        "y": 1680,
        "wires": [
            [
                "8969ddf0.30b7f"
            ]
        ]
    },
    {
        "id": "8969ddf0.30b7f",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "data",
        "func": "var data = msg.payload\nflow.set('data',data);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "c204293f.2ec3f8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "asset",
        "func": "var asset = msg.payload\nflow.set('asset',asset);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "eb773540.4a50e8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secretdist",
        "func": "var secretdist = msg.payload\nflow.set('secretdist',secretdist);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "b0d2d133.92e0c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "count",
        "func": "var count = msg.payload\nflow.set('count',count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "d6670d1b.af221",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction \\n fund new keypair",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nconst pair = StellarSdk.Keypair.random();\nmsg.secret=pair.secret();\nmsg.public=pair.publicKey();\n\nvar secretiss = msg.secret;\nvar assetiss = msg.public\nflow.set('assetiss',assetiss)\n\nvar secretdist = flow.get('secretdist',secretdist);\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\n\n\nvar transaction;\n\n//node.send(msg)\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.createAccount({\n          destination: msg.public,\n          startingBalance: \"2.5\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "fb0a29e3.d86ca8",
                "af0e19d4.4247f8"
            ]
        ]
    },
    {
        "id": "4dac8256.e52d9c",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f36459ea.16b5d8",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1320,
        "y": 1440,
        "wires": []
    },
    {
        "id": "474f15b9.c25eec",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Building NFTs",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1440,
        "wires": [
            [
                "4dac8256.e52d9c"
            ]
        ]
    },
    {
        "id": "fb0a29e3.d86ca8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "add trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretdist = flow.get('secretdist',secretdist);\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\n\nif (count<10){\n    count=\"0\"+count\n}\n\n/*if (count<100){\n    count=\"0\"+count\n}\n*/\nflow.set('count',count)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.changeTrust({\n          asset: new StellarSdk.Asset(asset+count,assetiss),\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 1120,
        "wires": [
            [
                "c663d3bc.49f6",
                "1f5ddbb4.cebcc4"
            ]
        ]
    },
    {
        "id": "e361dabe.661018",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sign and submit \\n add data+domain \\n add royalty \\n set auth",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretdist = flow.get('secretdist',secretdist);\nvar asset = flow.get('asset',asset)\nvar assetiss = flow.get('assetiss',assetiss)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar secretiss = msg.secret\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\nvar transaction;\n\nvar data = flow.get('data',data)\nvar domain = flow.get('domain',domain)\n\nvar royalty = flow.get('royalty',royalty)\nvar royaltydest = flow.get('royaltydest',royaltydest)\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n       .addOperation(\n        StellarSdk.Operation.manageData({\n          name: \"ipfs CID (base64)\",\n          value: data,\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n        .addOperation(\n        StellarSdk.Operation.manageData({\n          name: \"royalty\",\n          //name: \"royalty (% base64)\",\n          value: royalty,\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      .addOperation(\n        StellarSdk.Operation.manageData({\n          name: \"recipient\",\n          //name: \"royalty (% base64)\",\n          value: royaltydest,\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      .addOperation(\n        StellarSdk.Operation.setOptions({\n          //masterWeight: \"0\",\n          homeDomain: domain,\n          setFlags: 0x1,\n          //setFlags: 0x4|\"1\",\n          //setFlags: AuthImmutableFlag\n          //setFlags: StellarSdk.AuthImmutableFlag\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n    //node.send(msg)\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text('NFT by RedHorizon'))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n     // msg.xdr=transaction.toEnvelope().toXDR('base64')\n    //node.send(msg)\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    transaction.sign(distKeys);\n    // And finally, send it off to Stellar!\n    msg.xdr=transaction.toEnvelope().toXDR('base64')\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg)\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey()+\"\\n Issuer Secret: \"+msg.secret;\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.payload=\"Something went wrong! \"+ error;\n    node.send(msg)\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1360,
        "wires": [
            [
                "4dac8256.e52d9c",
                "cd4437a7.ee08a8"
            ]
        ]
    },
    {
        "id": "c663d3bc.49f6",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "send token",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = msg.secret;\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var amount = flow.get('amount',amount)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nvar secretdist = flow.get('secretdist',secretdist)\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: dist,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          //asset: StellarSdk.Asset.native(),\n          asset: new StellarSdk.Asset(asset+count,assetiss),\n          amount: \".0000001\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "59ab4a18.83aab4",
                "94035962.6e8248"
            ]
        ]
    },
    {
        "id": "94035962.6e8248",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "count",
        "property": "count",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "00",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "00",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1280,
        "wires": [
            [
                "89685d86.62c59",
                "f7a9258e.5573f8"
            ],
            [
                "e361dabe.661018"
            ]
        ]
    },
    {
        "id": "57ad140c.43c26c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "count-1",
        "func": "var count=flow.get('count',count)\ncount= count-1\n\nflow.set('count',count)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 1240,
        "wires": [
            [
                "fb0a29e3.d86ca8",
                "54bb2504.edf9fc"
            ]
        ]
    },
    {
        "id": "323191e4.0d48fe",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "domain",
        "label": "Home domain (no https://www.)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1720,
        "wires": [
            [
                "e4ab8502.89b8c8"
            ]
        ]
    },
    {
        "id": "e4ab8502.89b8c8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "domain",
        "func": "var domain = msg.payload\nflow.set('domain',domain);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "54bb2504.edf9fc",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "count",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1380,
        "wires": [
            [
                "4dac8256.e52d9c"
            ]
        ]
    },
    {
        "id": "dea4f2dd.89709",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Switch",
        "property": "network",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 1320,
        "wires": [
            [
                "d6670d1b.af221"
            ],
            [
                "d5b9a4bf.76b308"
            ]
        ]
    },
    {
        "id": "d5b9a4bf.76b308",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction \\n fund new keypair",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon.stellar.org\");\n\nvar asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nconst pair = StellarSdk.Keypair.random();\nmsg.secret=pair.secret();\nmsg.public=pair.publicKey();\n\nvar secretiss = msg.secret;\nvar assetiss = msg.public\nflow.set('assetiss',assetiss)\n\nvar secretdist = flow.get('secretdist',secretdist);\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\n\n\nvar transaction;\n\n//node.send(msg)\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.PUBLIC,\n    })\n      .addOperation(\n        StellarSdk.Operation.createAccount({\n          destination: msg.public,\n          startingBalance: \"2.5\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1420,
        "wires": [
            [
                "fb0a29e3.d86ca8",
                "7349e786.c1b1d8"
            ]
        ]
    },
    {
        "id": "dc6fadaf.098d3",
        "type": "ui_dropdown",
        "z": "a0cdded1.a335c",
        "name": "",
        "label": "Network",
        "tooltip": "",
        "place": "Test",
        "group": "f36459ea.16b5d8",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Test",
                "value": "test",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 1100,
        "y": 1940,
        "wires": [
            [
                "97f1c33c.b7ac2",
                "6eea257.2984edc"
            ]
        ]
    },
    {
        "id": "97f1c33c.b7ac2",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "network",
        "func": "var network = msg.payload\nflow.set('network',network);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar network = \"test\"\nflow.set('network',network);",
        "finalize": "",
        "x": 1360,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "89685d86.62c59",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1280,
        "wires": []
    },
    {
        "id": "cd4437a7.ee08a8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9f01ffb6.bc6d6",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Bug - Cannot create more than 31 \\n Makes 1 more than requested - #00",
        "info": "",
        "x": 1160,
        "y": 1500,
        "wires": []
    },
    {
        "id": "59ab4a18.83aab4",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1f5ddbb4.cebcc4",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1040,
        "wires": []
    },
    {
        "id": "af0e19d4.4247f8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7349e786.c1b1d8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7948293f.259668",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Royalty",
        "label": "Royalty %",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 6,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1800,
        "wires": [
            [
                "3b3d0319.0e04ec"
            ]
        ]
    },
    {
        "id": "3b3d0319.0e04ec",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "royalty",
        "func": "var royalty = msg.payload\nflow.set('royalty',royalty);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "7274da09.2811d4",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Royaltydest",
        "label": "Royalty Destination",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 7,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1110,
        "y": 1840,
        "wires": [
            [
                "162a0fd5.b1647"
            ]
        ]
    },
    {
        "id": "162a0fd5.b1647",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "royaltydest",
        "func": "var royaltydest = msg.payload\nflow.set('royaltydest',royaltydest);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1350,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "fcbac61a.985558",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Sell Price",
        "label": "Sell Price (/XLM max 214)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1880,
        "wires": [
            [
                "1d75ba29.e84cb6"
            ]
        ]
    },
    {
        "id": "1d75ba29.e84cb6",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "price",
        "func": "var price = msg.payload*10000000\nflow.set('price',price);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "f7a9258e.5573f8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sell offer",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = msg.secret;\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var amount = flow.get('amount',amount)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\nvar price = flow.get('price',price)\n//var discount=price*count*100000\nprice=price*(1-count*0.01)\nvar tempprice=price\nflow.set('tempprice',tempprice)\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nvar secretdist = flow.get('secretdist',secretdist)\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n        .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(asset+count,assetiss),\n            buying: StellarSdk.Asset.native(),\n            amount: \".0000001\",\n            price: price,\n            source: distKeys.publicKey()\n     }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 1240,
        "wires": [
            [
                "57ad140c.43c26c",
                "e59bc203.25381"
            ]
        ]
    },
    {
        "id": "e59bc203.25381",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1160,
        "wires": []
    },
    {
        "id": "eccc6f93.486dc",
        "type": "ui_toast",
        "z": "a0cdded1.a335c",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1740,
        "y": 940,
        "wires": []
    },
    {
        "id": "20a69217.bd378e",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Warning",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 940,
        "wires": [
            [],
            [
                "2b2d450f.65898a"
            ]
        ]
    },
    {
        "id": "2b2d450f.65898a",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is not ready for Public mainnet. You really really shouldn't use this on public. Seriously, it probably won't work and you will waste your XLM. \\nWhen the DB gets cleared your NFTs will be untradeable",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 940,
        "wires": [
            [
                "eccc6f93.486dc"
            ]
        ]
    },
    {
        "id": "7bf6140.f6374ec",
        "type": "ui_toast",
        "z": "a0cdded1.a335c",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1660,
        "y": 2000,
        "wires": []
    },
    {
        "id": "6eea257.2984edc",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Warning",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 2000,
        "wires": [
            [],
            [
                "9c82653c.0acb88"
            ]
        ]
    },
    {
        "id": "9c82653c.0acb88",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is not ready for Public mainnet. You really really shouldn't use this on public. Seriously, it probably won't work and you will waste your XLM",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 2000,
        "wires": [
            [
                "7bf6140.f6374ec"
            ]
        ]
    },
    {
        "id": "9ae6c7fc.469ca8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get price",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\nmsg.issuer=nftiss\n\nserver\n  .orderbook(\n    \n    new StellarSdk.Asset(\n      nftname,\n      nftiss,\n    ),\n    new StellarSdk.Asset.native(),\n  )\n  .call()\n  .then(function (resp) {\n   // console.log(resp);\n    msg.book=resp\n    //msg.payload=resp\n    msg.price=resp.asks[0].price*.0000001\n    msg.price=msg.price.toFixed(7)\n    msg.payload=msg.price+\" XLM\"\n\n    //msg.price=1/msg.price\n    node.send(msg)\n  })\n\n    .then(function (resp) {\n   \n    })\n     //flow.set('transaction',transaction);\n     // node.send(msg)\n   // return server.submitTransaction(transaction);\n // })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 720,
        "wires": [
            [
                "a0d32249.6b32c",
                "196866a2.fe51e9",
                "6314cc7d83e4d3ed"
            ]
        ]
    },
    {
        "id": "a0d32249.6b32c",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 640,
        "wires": []
    },
    {
        "id": "196866a2.fe51e9",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Price",
        "label": "Price",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1910,
        "y": 720,
        "wires": []
    },
    {
        "id": "c46aa5c6.881bb8",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Something went wrong! Error: XDR Read Error: Unknown PublicKeyType member for value 1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Submitting to Stellar",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 500,
        "wires": [
            [
                "53f8b00c.c7a45"
            ],
            [
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "53f8b00c.c7a45",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Success",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 520,
        "wires": [
            [
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "afc63aad.57c348",
        "type": "sqlite",
        "z": "a0cdded1.a335c",
        "mydb": "a9b7ad7b.f992a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "RoyalT",
        "x": 620,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "e4357346.98cec",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "add NFT",
        "func": "var loanID = flow.get('loanID',loanID);\nvar NFT = flow.get('NFT',NFT);\nvar issuer = flow.get('issuer',issuer);\nvar amount = flow.get('amount',amount);\nvar fee = flow.get('fee',fee);\nvar duration = flow.get('duration',duration);\n//var XDR = flow.get('XDR',XDR);\nvar secretnft = flow.get('secretnft',secretnft)\n//msg.topic = \"INSERT INTO TeleUsers(id, public, private) values(\"+user+\", \"+'\"'+public+'\", '+'\"'+private+'\")'\n\n\nmsg.topic = \"INSERT INTO Loans(loanID, NFT, Issuer, Amount, Fee, Time, Secret) values(\"+loanID+\", \"+'\"'+NFT+'\", '+'\"'+issuer+'\", '+'\"'+amount+'\", '+'\"'+fee+'\",'+'\"'+duration+'\",'+'\"'+secretnft+'\")'\nloanID=loanID+1\nflow.set('loanID',loanID);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar loanID = 0;\nflow.set('loanID',loanID);",
        "finalize": "",
        "x": 440,
        "y": 1700,
        "wires": [
            [
                "afc63aad.57c348"
            ]
        ]
    },
    {
        "id": "741b4da8.1ba8d4",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "RoyalT",
        "label": "RoyalT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1940,
        "y": 800,
        "wires": []
    },
    {
        "id": "28885489.cea38c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "calculate RoyalT",
        "func": "msg.royalty=msg.price*.01*msg.royalty\nmsg.royalty=msg.royalty.toFixed(7)\n    msg.payload=msg.royalty+\" XLM\"\n  \n    node.send(msg)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 800,
        "wires": [
            [
                "741b4da8.1ba8d4",
                "928d7457.ab0238",
                "77bd78dc.f7dce8"
            ]
        ]
    },
    {
        "id": "c0fd7723.7628a8",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Total",
        "label": "Total",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1930,
        "y": 840,
        "wires": []
    },
    {
        "id": "928d7457.ab0238",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "calculate total",
        "func": "var pricedisplay=parseFloat(msg.price)\nvar royaltydisplay=parseFloat(msg.royalty)\n//flow.set('pricedisplay',pricedisplay)\n//flow.set('royaltydisplay',royaltydisplay)\n\n    msg.payload=pricedisplay+royaltydisplay+\" XLM\"\n    node.send(msg)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 840,
        "wires": [
            [
                "c0fd7723.7628a8",
                "688419e7.0385f8"
            ]
        ]
    },
    {
        "id": "5357ebbd.f252a4",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f36459ea.16b5d8",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Price decreases by 1% per mint edition",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 290,
        "y": 160,
        "wires": []
    },
    {
        "id": "688419e7.0385f8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 900,
        "wires": []
    },
    {
        "id": "77bd78dc.f7dce8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 760,
        "wires": []
    },
    {
        "id": "18aaeaf0.2e8ba5",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 620,
        "wires": []
    },
    {
        "id": "ff753feb.10ba6",
        "type": "http request",
        "z": "a0cdded1.a335c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://horizon-testnet.stellar.org/accounts/{{{issuer}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "18aaeaf0.2e8ba5",
                "d3b78c35.95832"
            ]
        ]
    },
    {
        "id": "a555679c.8234f8",
        "type": "inject",
        "z": "a0cdded1.a335c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 640,
        "wires": [
            [
                "ff753feb.10ba6"
            ]
        ]
    },
    {
        "id": "ad83ca64.ee3d78",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "d3b78c35.95832",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get data",
        "func": "//msg.royalty=msg.payload.data.[\"royalty '(% base64)'\"]\nmsg.royalty=msg.payload.data.royalty\n//msg.royalty=msg.payload.data[0].price\nmsg.recipient=msg.payload.data.recipient\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 720,
        "wires": [
            [
                "ad83ca64.ee3d78",
                "7497d71062977412"
            ]
        ]
    },
    {
        "id": "23c2407d.ca284",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Create offer",
        "info": "",
        "x": 440,
        "y": 2140,
        "wires": []
    },
    {
        "id": "fd1a6a0.54e5a98",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key",
        "label": "Secret Key",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1130,
        "y": 2220,
        "wires": [
            [
                "7497a584.1adb4c"
            ]
        ]
    },
    {
        "id": "75fcd0b4.6843e",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Asset to sell - Name",
        "label": "NFT to sell - Name",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1160,
        "y": 2260,
        "wires": [
            [
                "9f40e579.f3ea58"
            ]
        ]
    },
    {
        "id": "e24e82c2.2d136",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Price",
        "label": "Price /XLM max 214",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1110,
        "y": 2460,
        "wires": [
            [
                "d3539e4e.21967"
            ]
        ]
    },
    {
        "id": "7497a584.1adb4c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secret2",
        "func": "var secret2 = msg.payload\nflow.set('secret2',secret2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "9f40e579.f3ea58",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sell",
        "func": "var sell = msg.payload\nflow.set('sell',sell);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "9ef10b08.40def8",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f18028a3.d866a8",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 900,
        "y": 2340,
        "wires": []
    },
    {
        "id": "13b0101f.2a8b6",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f18028a3.d866a8",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Submitting text display",
        "label": "",
        "format": "{{msg.topic}}",
        "layout": "row-spread",
        "x": 900,
        "y": 2260,
        "wires": []
    },
    {
        "id": "3a2dc56f.9f03da",
        "type": "ui_button",
        "z": "a0cdded1.a335c",
        "name": "Submit Offer",
        "group": "f18028a3.d866a8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Submit Offer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "27bd058.c9a7efa",
                "7f9dfe90.18513",
                "a2884e0b.53d4a",
                "badac99b.87f728"
            ]
        ]
    },
    {
        "id": "27bd058.c9a7efa",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Building Tx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 2260,
        "wires": [
            [
                "13b0101f.2a8b6"
            ]
        ]
    },
    {
        "id": "7f9dfe90.18513",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 2300,
        "wires": [
            [
                "9ef10b08.40def8"
            ]
        ]
    },
    {
        "id": "24fc04b3.0f2cfc",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 2280,
        "wires": [
            [
                "13b0101f.2a8b6"
            ]
        ]
    },
    {
        "id": "d3539e4e.21967",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "price2",
        "func": "var price2 = msg.payload*10000000\nflow.set('price2',price2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "93e7bf2b.5c07a",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Asset to sell - Issuer",
        "label": "NFT to sell - Issuer",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1160,
        "y": 2300,
        "wires": [
            [
                "207bfacd.9eeaf6"
            ]
        ]
    },
    {
        "id": "207bfacd.9eeaf6",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "selliss",
        "func": "var selliss = msg.payload\nflow.set('selliss',selliss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "16b782d2.802e5d",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Store Variables from Dashboard UI",
        "info": "",
        "x": 1220,
        "y": 2180,
        "wires": []
    },
    {
        "id": "a2884e0b.53d4a",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Create Sell Offer",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar secret2 = flow.get('secret2',secret2);\nvar sell = flow.get('sell',sell);\nvar selliss = flow.get('selliss',selliss);\nvar price2 = flow.get('price2',price2);\n//price2=toString(price2)\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  secret2,\n);\n//var destinationId = msg.payload.sourceAccount;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  //.loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  //.catch(function (error) {\n   // if (error instanceof StellarSdk.NotFoundError) {\n  //    throw new Error(\"The destination account does not exist!\");\n  //  } else return error;\n // })\n  // If there was no error, load up-to-date information on your account.\n  .loadAccount(sourceKeys.publicKey())\n  \n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(sell,selliss),\n            buying: new StellarSdk.Asset.native(),\n            amount: \".0000001\",\n            price: price2\n     }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(\"NFT Sale by RoyalT\"))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n\n    transaction.sign(sourceKeys);\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload = \"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.payload =\"Something went wrong! \"+ error\n    node.send(msg);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 2420,
        "wires": [
            [
                "9ef10b08.40def8",
                "24fc04b3.0f2cfc",
                "9eafd43c.cbbd78"
            ]
        ]
    },
    {
        "id": "badac99b.87f728",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 2480,
        "wires": []
    },
    {
        "id": "9eafd43c.cbbd78",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2500,
        "wires": []
    },
    {
        "id": "7497d71062977412",
        "type": "base64",
        "z": "a0cdded1.a335c",
        "name": "",
        "action": "b64",
        "property": "royalty",
        "x": 830,
        "y": 800,
        "wires": [
            [
                "9f8caa57ac90281c",
                "19eefc300b90c80d"
            ]
        ]
    },
    {
        "id": "9f8caa57ac90281c",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 800,
        "wires": []
    },
    {
        "id": "19eefc300b90c80d",
        "type": "base64",
        "z": "a0cdded1.a335c",
        "name": "",
        "action": "b64",
        "property": "recipient",
        "x": 880,
        "y": 860,
        "wires": [
            [
                "48293d78336e6acf",
                "ab4d5a66.585f58"
            ]
        ]
    },
    {
        "id": "48293d78336e6acf",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 860,
        "wires": []
    },
    {
        "id": "409e9ff623872c7e",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 380,
        "wires": []
    },
    {
        "id": "6314cc7d83e4d3ed",
        "type": "http request",
        "z": "a0cdded1.a335c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://horizon-testnet.stellar.org/accounts/{{{issuer}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1770,
        "y": 380,
        "wires": [
            [
                "409e9ff623872c7e",
                "7e4473151ff1c566"
            ]
        ]
    },
    {
        "id": "548a8235eb558992",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 480,
        "wires": []
    },
    {
        "id": "7e4473151ff1c566",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get data",
        "func": "//msg.royalty=msg.payload.data.[\"royalty '(% base64)'\"]\nmsg.royalty=msg.payload.data.royalty\n//msg.royalty=msg.payload.data[0].price\nmsg.recipient=msg.payload.data.recipient\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 480,
        "wires": [
            [
                "548a8235eb558992",
                "2d71dc9d11256804"
            ]
        ]
    },
    {
        "id": "2d71dc9d11256804",
        "type": "base64",
        "z": "a0cdded1.a335c",
        "name": "",
        "action": "b64",
        "property": "royalty",
        "x": 2010,
        "y": 560,
        "wires": [
            [
                "0a25b6b835caac56",
                "28885489.cea38c"
            ]
        ]
    },
    {
        "id": "0a25b6b835caac56",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 560,
        "wires": []
    },
    {
        "id": "a247e8e9d32764f3",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 620,
        "wires": []
    },
    {
        "id": "460f3ded62119031",
        "type": "debug",
        "z": "cbb5f88593031478",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 140,
        "wires": []
    },
    {
        "id": "1e8f45cbb5652f18",
        "type": "ngrok",
        "z": "cbb5f88593031478",
        "buttonState": false,
        "port": "",
        "portType": "node-red",
        "host": "",
        "hostType": "localhost",
        "creds": "a4389ac42deda41c",
        "region": "us",
        "regionType": "us",
        "proto": "http",
        "bind_tls": "both",
        "bind_tlsType": "both",
        "subdomain": "",
        "subdomainType": "none",
        "auth": "",
        "authType": "none",
        "hostHeader": "",
        "hostHeaderType": "none",
        "name": "",
        "inputtype": "button",
        "inputs": 0,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "460f3ded62119031"
            ]
        ]
    }
]