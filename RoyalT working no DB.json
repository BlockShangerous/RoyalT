[
    {
        "id": "a0cdded1.a335c",
        "type": "tab",
        "label": "RoyalT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c8113d06.878b5",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "77866822.182798",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nvar secretbuy = flow.get('secretbuy',secretbuy);\n//var asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar assetiss = sourceKeys.publicKey()\n//flow.set('assetiss',assetiss)\n\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "c8113d06.878b5",
                "f9c196a6.c7c228"
            ]
        ]
    },
    {
        "id": "d7e1e2d1.15ee6",
        "type": "inject",
        "z": "a0cdded1.a335c",
        "name": "",
        "props": [
            {
                "p": "price",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "77866822.182798"
            ]
        ]
    },
    {
        "id": "6227b87d.13f9e8",
        "type": "ui_button",
        "z": "a0cdded1.a335c",
        "name": "Match sell offer",
        "group": "b7bc8c2.90c527",
        "order": 5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Match sell offer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": " ",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "27bbad5a.457182",
                "8d7a3d23.2b2e4"
            ]
        ]
    },
    {
        "id": "e92ac601.f7b2e8",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1640,
        "y": 600,
        "wires": []
    },
    {
        "id": "27bbad5a.457182",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Building Tx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "8fec78d.d698588",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "cdec65c5.8444f8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "allow trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = flow.get('secretiss',secretiss);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar secretbuy = flow.get('secretbuy',secretbuy);\nvar buyerkeypair = StellarSdk.Keypair.fromSecret(secretbuy);\nvar publicbuyer = buyerkeypair.publicKey()\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nserver\n  .loadAccount(buyerkeypair.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.setTrustLineFlags({\n          trustor: publicbuyer,\n          asset: new StellarSdk.Asset(nftname,nftiss),\n          flags: {authorized:true},\n          source: sourceKeys.publicKey()\n        }),\n      )\n     \n      \n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 340,
        "wires": [
            [
                "9dd04450.ce0c88",
                "fcf99cb7.6fdfd"
            ]
        ]
    },
    {
        "id": "f9e38c.d54d0c78",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 220,
        "wires": []
    },
    {
        "id": "fad0966f.901cb8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sign and submit",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretbuy = flow.get('secretbuy',secretbuy);\nvar secretiss = flow.get('secretiss',secretiss);\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar sourceKeys2 = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n    \n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text('NFT by RoyalT'))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    transaction.sign(sourceKeys2);\n    // And finally, send it off to Stellar!\n    msg.xdr=transaction.toEnvelope().toXDR('base64')\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg)\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.payload=\"Something went wrong! \"+ error;\n    node.send(msg);\n    //msg.send(msg)\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "dfbafc4b.482e",
                "6a5f0c9f.008964",
                "c46aa5c6.881bb8"
            ]
        ]
    },
    {
        "id": "dfbafc4b.482e",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 360,
        "wires": []
    },
    {
        "id": "6a5f0c9f.008964",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 420,
        "wires": []
    },
    {
        "id": "9dd04450.ce0c88",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "match offer",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretbuy = flow.get('secretbuy',secretbuy);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar transaction;\n\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.manageBuyOffer({\n            selling: new StellarSdk.Asset.native(),\n            buying: new StellarSdk.Asset(nftname,nftiss),\n            buyAmount: \".0000001\",\n            price: msg.price\n     }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 950,
        "y": 380,
        "wires": [
            [
                "ab4d5a66.585f58",
                "93f3c50c.9633f8"
            ]
        ]
    },
    {
        "id": "d2d12a4a.e96198",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "NFT - Name",
        "label": "NFT - Name",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1250,
        "y": 800,
        "wires": [
            [
                "8afe2867.dcfd28"
            ]
        ]
    },
    {
        "id": "19cb4b58.344585",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key - Buyer",
        "label": "Secret Key - Buyer",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1270,
        "y": 760,
        "wires": [
            [
                "1bfef25c.47228e"
            ]
        ]
    },
    {
        "id": "74d1f21b.da995c",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "NFT Issuer",
        "label": "NFT Issuer",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1250,
        "y": 720,
        "wires": [
            [
                "cd9c7b41.404cb8"
            ]
        ]
    },
    {
        "id": "cd9c7b41.404cb8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "nftiss",
        "func": "var nftiss = msg.payload\nflow.set('nftiss',nftiss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 720,
        "wires": [
            [
                "9ae6c7fc.469ca8"
            ]
        ]
    },
    {
        "id": "8afe2867.dcfd28",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "nftname",
        "func": "var nftname = msg.payload\nflow.set('nftname',nftname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 800,
        "wires": [
            [
                "9ae6c7fc.469ca8"
            ]
        ]
    },
    {
        "id": "1bfef25c.47228e",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secretbuy",
        "func": "var secretbuy = msg.payload\nflow.set('secretbuy',secretbuy);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "fcf99cb7.6fdfd",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 280,
        "wires": []
    },
    {
        "id": "af004690.5fb738",
        "type": "ui_dropdown",
        "z": "a0cdded1.a335c",
        "name": "",
        "label": "Network",
        "tooltip": "",
        "place": "Test",
        "group": "b7bc8c2.90c527",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Test",
                "value": "test",
                "type": "str"
            },
            {
                "label": "Public",
                "value": "public",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 1240,
        "y": 880,
        "wires": [
            [
                "74abf04f.2f5b8",
                "20a69217.bd378e"
            ]
        ]
    },
    {
        "id": "74abf04f.2f5b8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "network",
        "func": "var network = msg.payload\nflow.set('network',network);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar network = \"test\"\nflow.set('network',network);",
        "finalize": "",
        "x": 1500,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a6e8b8fa.dfdf18",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon.stellar.org\");\nvar secretbuy = flow.get('secretbuy',secretbuy);\n//var asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar assetiss = sourceKeys.publicKey()\n//flow.set('assetiss',assetiss)\n\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.PUBLIC,\n    })\n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 440,
        "wires": [
            [
                "f9c196a6.c7c228"
            ]
        ]
    },
    {
        "id": "8d7a3d23.2b2e4",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Switch",
        "property": "network",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "77866822.182798"
            ],
            [
                "a6e8b8fa.dfdf18"
            ]
        ]
    },
    {
        "id": "1f561b.7834a9e6",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Mainnet",
        "info": "",
        "x": 450,
        "y": 480,
        "wires": []
    },
    {
        "id": "5f1de83b.f86bf8",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Display",
        "info": "",
        "x": 1410,
        "y": 460,
        "wires": []
    },
    {
        "id": "ddfef779.dbebf8",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Match sell offer",
        "info": "",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "f9c196a6.c7c228",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get price",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n\nserver\n  .orderbook(\n    \n    new StellarSdk.Asset(\n      nftname,\n      nftiss,\n    ),\n    new StellarSdk.Asset.native(),\n  )\n  .call()\n  .then(function (resp) {\n   // console.log(resp);\n    //msg.book=resp\n    //msg.payload=resp\n    msg.price=resp.asks[0].price\n    //msg.price=1/msg.price\n    node.send(msg)\n  })\n\n    .then(function (resp) {\n   \n    })\n     //flow.set('transaction',transaction);\n     // node.send(msg)\n   // return server.submitTransaction(transaction);\n // })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 240,
        "wires": [
            [
                "8fec78d.d698588",
                "fa2c6781.1dcb78"
            ]
        ]
    },
    {
        "id": "945a0d75.31a0f",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key - Issuer",
        "label": "Secret Key - Issuer",
        "tooltip": "",
        "group": "b7bc8c2.90c527",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1270,
        "y": 680,
        "wires": [
            [
                "86d092ac.1fa88"
            ]
        ]
    },
    {
        "id": "86d092ac.1fa88",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secretiss",
        "func": "var secretiss = msg.payload\nflow.set('secretiss',secretiss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "fa2c6781.1dcb78",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "add trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\n\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\nvar secretbuy = flow.get('secretbuy',secretbuy);\n\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.changeTrust({\n          asset: new StellarSdk.Asset(nftname,nftiss),\n          //source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "f9e38c.d54d0c78",
                "cdec65c5.8444f8"
            ]
        ]
    },
    {
        "id": "ab4d5a66.585f58",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "send royalty",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\n\nvar secretbuy = flow.get('secretbuy',secretbuy);\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretbuy);\nvar transaction;\n\nvar royaltyamount=msg.price*.00000001\nroyaltyamount=royaltyamount.toFixed(7)\nflow.set('royaltyamount',royaltyamount)\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: \"GBH26LA32MSMJNXRNYQTX5QJZZTD2XXXXLUPJOXJPHTAHFBI2HXOHRA7\",\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          asset: StellarSdk.Asset.native(),\n          amount: royaltyamount.toString(),\n          //source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "fad0966f.901cb8",
                "df4046f5.a16d98"
            ]
        ]
    },
    {
        "id": "93f3c50c.9633f8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "df4046f5.a16d98",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 360,
        "wires": []
    },
    {
        "id": "efca7ba.205e488",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get price",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n\nserver\n  .orderbook(\n    \n    new StellarSdk.Asset(\n      nftname,\n      nftiss,\n    ),\n    new StellarSdk.Asset.native(),\n  )\n  .call()\n  .then(function (resp) {\n   // console.log(resp);\n    msg.book=resp\n    //msg.payload=resp\n    \n  })\n\n    .then(function (resp) {\n    msg.price=msg.book.bids[0].price\n    msg.price=1/msg.price\n    node.send(msg)\n    })\n     //flow.set('transaction',transaction);\n     // node.send(msg)\n   // return server.submitTransaction(transaction);\n // })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b01b584e.edf9a8",
        "type": "inject",
        "z": "a0cdded1.a335c",
        "name": "",
        "props": [
            {
                "p": "secret",
                "v": "SBSZQMYX2EAT6MGDOAJ3OONFHT6TVVWLLAZEESRIQ7G3CYLHTCWTC3UX",
                "vt": "str"
            },
            {
                "p": "name",
                "v": "COOL",
                "vt": "str"
            },
            {
                "p": "iss",
                "v": "GBN5VTPXODILAQTMMB23ML5B7RKF657YXXALLWFKGZPSW53QGR6OUG4L",
                "vt": "str"
            },
            {
                "p": "op",
                "v": "changeTrust",
                "vt": "str"
            },
            {
                "p": "dest",
                "v": "GAC4LTCWBQAVRNXP67QMT55KZ3BIYPVMLIC46FYSO6HN2ZFZLFKW5WJX",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "d6670d1b.af221"
            ]
        ]
    },
    {
        "id": "4f0ef700.07bd58",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Create Multiple NFTs",
        "info": "",
        "x": 330,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4d5ea965.4991e8",
        "type": "ui_button",
        "z": "a0cdded1.a335c",
        "name": "Create NFTs",
        "group": "f36459ea.16b5d8",
        "order": 11,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Create NFTs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 80,
        "y": 1260,
        "wires": [
            [
                "474f15b9.c25eec",
                "dea4f2dd.89709"
            ]
        ]
    },
    {
        "id": "e305fdc2.c840c",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Asset - Name",
        "label": "Asset - Name",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1120,
        "y": 1640,
        "wires": [
            [
                "c204293f.2ec3f8"
            ]
        ]
    },
    {
        "id": "535e4bfa.b73244",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Amount",
        "label": "Amount (max 30)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 5,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "b0d2d133.92e0c"
            ]
        ]
    },
    {
        "id": "aaa14c36.4aa31",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key - Origin",
        "label": "Secret Key - Origin",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1130,
        "y": 1600,
        "wires": [
            [
                "eb773540.4a50e8"
            ]
        ]
    },
    {
        "id": "d415be5c.0174c",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Data",
        "label": "Data (IPFS CID)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1090,
        "y": 1680,
        "wires": [
            [
                "8969ddf0.30b7f"
            ]
        ]
    },
    {
        "id": "8969ddf0.30b7f",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "data",
        "func": "var data = msg.payload\nflow.set('data',data);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "c204293f.2ec3f8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "asset",
        "func": "var asset = msg.payload\nflow.set('asset',asset);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "eb773540.4a50e8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secretdist",
        "func": "var secretdist = msg.payload\nflow.set('secretdist',secretdist);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "b0d2d133.92e0c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "count",
        "func": "var count = msg.payload\nflow.set('count',count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "d6670d1b.af221",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction \\n fund new keypair",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nconst pair = StellarSdk.Keypair.random();\nmsg.secret=pair.secret();\nmsg.public=pair.publicKey();\n\nvar secretiss = msg.secret;\nvar assetiss = msg.public\nflow.set('assetiss',assetiss)\n\nvar secretdist = flow.get('secretdist',secretdist);\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\n\n\nvar transaction;\n\n//node.send(msg)\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.createAccount({\n          destination: msg.public,\n          startingBalance: \"2\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "fb0a29e3.d86ca8",
                "af0e19d4.4247f8"
            ]
        ]
    },
    {
        "id": "4dac8256.e52d9c",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f36459ea.16b5d8",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1320,
        "y": 1440,
        "wires": []
    },
    {
        "id": "474f15b9.c25eec",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Building NFTs",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1440,
        "wires": [
            [
                "4dac8256.e52d9c"
            ]
        ]
    },
    {
        "id": "fb0a29e3.d86ca8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "add trust",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretdist = flow.get('secretdist',secretdist);\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\n\nif (count<10){\n    count=\"0\"+count\n}\n\n/*if (count<100){\n    count=\"0\"+count\n}\n*/\nflow.set('count',count)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar transaction;\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.changeTrust({\n          asset: new StellarSdk.Asset(asset+count,assetiss),\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 1120,
        "wires": [
            [
                "c663d3bc.49f6",
                "1f5ddbb4.cebcc4"
            ]
        ]
    },
    {
        "id": "e361dabe.661018",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sign and submit \\n add data+domain \\n add royalty \\n set auth",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretdist = flow.get('secretdist',secretdist);\nvar asset = flow.get('asset',asset)\nvar assetiss = flow.get('assetiss',assetiss)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar secretiss = msg.secret\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\nvar transaction;\n\nvar data = flow.get('data',data)\nvar domain = flow.get('domain',domain)\n\nvar royalty = flow.get('royalty',royalty)\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n       .addOperation(\n        StellarSdk.Operation.manageData({\n          name: \"ipfs CID (base64)\",\n          value: data,\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n        .addOperation(\n        StellarSdk.Operation.manageData({\n          name: \"royalty (% base64)\",\n          value: royalty,\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      .addOperation(\n        StellarSdk.Operation.setOptions({\n          //masterWeight: \"0\",\n          homeDomain: domain,\n          setFlags: 0x1,\n          //setFlags: 0x4|\"1\",\n          //setFlags: AuthImmutableFlag\n          //setFlags: StellarSdk.AuthImmutableFlag\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n    //node.send(msg)\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text('NFT by RedHorizon'))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n     // msg.xdr=transaction.toEnvelope().toXDR('base64')\n    //node.send(msg)\n    // Sign the transaction to prove you are actually the person sending it.\n    transaction.sign(sourceKeys);\n    transaction.sign(distKeys);\n    // And finally, send it off to Stellar!\n    msg.xdr=transaction.toEnvelope().toXDR('base64')\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg)\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    console.log(\"Success! Results:\", result);\n    msg.payload=\"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey()+\"\\n Issuer Secret: \"+msg.secret;\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.payload=\"Something went wrong! \"+ error;\n    node.send(msg)\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 1360,
        "wires": [
            [
                "4dac8256.e52d9c",
                "cd4437a7.ee08a8"
            ]
        ]
    },
    {
        "id": "c663d3bc.49f6",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "send token",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = msg.secret;\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var amount = flow.get('amount',amount)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\n\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nvar secretdist = flow.get('secretdist',secretdist)\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n      .addOperation(\n        StellarSdk.Operation.payment({\n          destination: dist,\n          // Because Stellar allows transaction in many currencies, you must\n          // specify the asset type. The special \"native\" asset represents Lumens.\n          //asset: StellarSdk.Asset.native(),\n          asset: new StellarSdk.Asset(asset+count,assetiss),\n          amount: \".0000001\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "59ab4a18.83aab4",
                "94035962.6e8248"
            ]
        ]
    },
    {
        "id": "94035962.6e8248",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "count",
        "property": "count",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "00",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "00",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1280,
        "wires": [
            [
                "89685d86.62c59",
                "f7a9258e.5573f8"
            ],
            [
                "e361dabe.661018"
            ]
        ]
    },
    {
        "id": "57ad140c.43c26c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "count-1",
        "func": "var count=flow.get('count',count)\ncount= count-1\n\nflow.set('count',count)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 1240,
        "wires": [
            [
                "fb0a29e3.d86ca8",
                "54bb2504.edf9fc"
            ]
        ]
    },
    {
        "id": "323191e4.0d48fe",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "domain",
        "label": "Home domain (no https://www.)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1720,
        "wires": [
            [
                "e4ab8502.89b8c8"
            ]
        ]
    },
    {
        "id": "e4ab8502.89b8c8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "domain",
        "func": "var domain = msg.payload\nflow.set('domain',domain);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "54bb2504.edf9fc",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "count",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1380,
        "wires": [
            [
                "4dac8256.e52d9c"
            ]
        ]
    },
    {
        "id": "dea4f2dd.89709",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Switch",
        "property": "network",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 1320,
        "wires": [
            [
                "d6670d1b.af221"
            ],
            [
                "d5b9a4bf.76b308"
            ]
        ]
    },
    {
        "id": "d5b9a4bf.76b308",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Setup StellarSDK flow.transaction \\n fund new keypair",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon.stellar.org\");\n\nvar asset = flow.get('asset',asset)\n\n//var op = msg.op\nflow.set('StellarSdk',StellarSdk);\nflow.set('server',server);\n//node.send(msg)\n\nconst pair = StellarSdk.Keypair.random();\nmsg.secret=pair.secret();\nmsg.public=pair.publicKey();\n\nvar secretiss = msg.secret;\nvar assetiss = msg.public\nflow.set('assetiss',assetiss)\n\nvar secretdist = flow.get('secretdist',secretdist);\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretdist);\n\n\nvar transaction;\n\n//node.send(msg)\n\nserver\n  .loadAccount(sourceKeys.publicKey())\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.PUBLIC,\n    })\n      .addOperation(\n        StellarSdk.Operation.createAccount({\n          destination: msg.public,\n          startingBalance: \"2\",\n          source: sourceKeys.publicKey()\n        }),\n      )\n      \n      flow.set('transaction',transaction);\n      node.send(msg)\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 1420,
        "wires": [
            [
                "fb0a29e3.d86ca8",
                "7349e786.c1b1d8"
            ]
        ]
    },
    {
        "id": "dc6fadaf.098d3",
        "type": "ui_dropdown",
        "z": "a0cdded1.a335c",
        "name": "",
        "label": "Network",
        "tooltip": "",
        "place": "Test",
        "group": "f36459ea.16b5d8",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Test",
                "value": "test",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 1100,
        "y": 1940,
        "wires": [
            [
                "97f1c33c.b7ac2",
                "6eea257.2984edc"
            ]
        ]
    },
    {
        "id": "97f1c33c.b7ac2",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "network",
        "func": "var network = msg.payload\nflow.set('network',network);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar network = \"test\"\nflow.set('network',network);",
        "finalize": "",
        "x": 1360,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "89685d86.62c59",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1280,
        "wires": []
    },
    {
        "id": "cd4437a7.ee08a8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9f01ffb6.bc6d6",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Bug - Cannot create more than 31 \\n Makes 1 more than requested - #00",
        "info": "",
        "x": 1160,
        "y": 1500,
        "wires": []
    },
    {
        "id": "59ab4a18.83aab4",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1f5ddbb4.cebcc4",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1040,
        "wires": []
    },
    {
        "id": "af0e19d4.4247f8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7349e786.c1b1d8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7948293f.259668",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Royalty",
        "label": "Royalty %",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 6,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1800,
        "wires": [
            [
                "3b3d0319.0e04ec"
            ]
        ]
    },
    {
        "id": "3b3d0319.0e04ec",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "royalty",
        "func": "var royalty = msg.payload\nflow.set('royalty',royalty);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "7274da09.2811d4",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Royaltydest",
        "label": "Royalty Destination",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 7,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1110,
        "y": 1840,
        "wires": [
            [
                "162a0fd5.b1647"
            ]
        ]
    },
    {
        "id": "162a0fd5.b1647",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "royaltydest",
        "func": "var royaltydest = msg.payload\nflow.set('royaltydest',royaltydest);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1350,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "fcbac61a.985558",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Sell Price",
        "label": "Sell Price (/XLM max 214)",
        "tooltip": "",
        "group": "f36459ea.16b5d8",
        "order": 8,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1100,
        "y": 1880,
        "wires": [
            [
                "1d75ba29.e84cb6"
            ]
        ]
    },
    {
        "id": "1d75ba29.e84cb6",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "price",
        "func": "var price = msg.payload*10000000\nflow.set('price',price);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "f7a9258e.5573f8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sell offer",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar secretiss = msg.secret;\nvar asset = flow.get('asset',asset)\nvar assetiss = msg.public\n//var amount = flow.get('amount',amount)\n//var op = msg.op\n//flow.set('StellarSDK',StellarSDK);\n//flow.set('server',server);\nvar count = flow.get('count',count)\nvar price = flow.get('price',price)\n//var discount=price*count*100000\nprice=price*(1-count*0.01)\nvar tempprice=price\nflow.set('tempprice',tempprice)\nvar sourceKeys = StellarSdk.Keypair.fromSecret(secretiss);\nvar transaction;\n\nvar secretdist = flow.get('secretdist',secretdist)\nvar distKeys = StellarSdk.Keypair.fromSecret(secretdist);\nvar dist = distKeys.publicKey()\n\nserver\n  .loadAccount(dist)\n\n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = flow.get('transaction',transaction)\n    \n        .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(asset+count,assetiss),\n            buying: StellarSdk.Asset.native(),\n            amount: \".0000001\",\n            price: price,\n            source: distKeys.publicKey()\n     }),\n      )\n      \n     flow.set('transaction',transaction);\n      node.send(msg)\n   // return server.submitTransaction(transaction);\n  })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 1240,
        "wires": [
            [
                "57ad140c.43c26c",
                "e59bc203.25381"
            ]
        ]
    },
    {
        "id": "e59bc203.25381",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1160,
        "wires": []
    },
    {
        "id": "eccc6f93.486dc",
        "type": "ui_toast",
        "z": "a0cdded1.a335c",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1740,
        "y": 940,
        "wires": []
    },
    {
        "id": "20a69217.bd378e",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Warning",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 940,
        "wires": [
            [],
            [
                "2b2d450f.65898a"
            ]
        ]
    },
    {
        "id": "2b2d450f.65898a",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is not ready for Public mainnet. You really really shouldn't use this on public. Seriously, it probably won't work and you will waste your XLM. \\nWhen the DB gets cleared your NFTs will be untradeable",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 940,
        "wires": [
            [
                "eccc6f93.486dc"
            ]
        ]
    },
    {
        "id": "7bf6140.f6374ec",
        "type": "ui_toast",
        "z": "a0cdded1.a335c",
        "position": "top right",
        "displayTime": "60",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1660,
        "y": 2000,
        "wires": []
    },
    {
        "id": "6eea257.2984edc",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "Network Warning",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "public",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 2000,
        "wires": [
            [],
            [
                "9c82653c.0acb88"
            ]
        ]
    },
    {
        "id": "9c82653c.0acb88",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "This is not ready for Public mainnet. You really really shouldn't use this on public. Seriously, it probably won't work and you will waste your XLM",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 2000,
        "wires": [
            [
                "7bf6140.f6374ec"
            ]
        ]
    },
    {
        "id": "9ae6c7fc.469ca8",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get price",
        "func": "var StellarSdk = flow.get(\"StellarSdk\");\nvar server = flow.get('server',server);\nvar nftname = flow.get('nftname',nftname)\nvar nftiss = flow.get('nftiss',nftiss)\n\nserver\n  .orderbook(\n    \n    new StellarSdk.Asset(\n      nftname,\n      nftiss,\n    ),\n    new StellarSdk.Asset.native(),\n  )\n  .call()\n  .then(function (resp) {\n   // console.log(resp);\n    //msg.book=resp\n    //msg.payload=resp\n    msg.price=resp.asks[0].price*.0000001\n    msg.price=msg.price.toFixed(7)\n    msg.payload=msg.price+\" XLM\"\n\n    //msg.price=1/msg.price\n    node.send(msg)\n  })\n\n    .then(function (resp) {\n   \n    })\n     //flow.set('transaction',transaction);\n     // node.send(msg)\n   // return server.submitTransaction(transaction);\n // })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1700,
        "y": 720,
        "wires": [
            [
                "a0d32249.6b32c",
                "196866a2.fe51e9",
                "28885489.cea38c"
            ]
        ]
    },
    {
        "id": "a0d32249.6b32c",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 640,
        "wires": []
    },
    {
        "id": "196866a2.fe51e9",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Price",
        "label": "Price",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1910,
        "y": 720,
        "wires": []
    },
    {
        "id": "c46aa5c6.881bb8",
        "type": "switch",
        "z": "a0cdded1.a335c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Something went wrong! Error: XDR Read Error: Unknown PublicKeyType member for value 1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Submitting to Stellar",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 500,
        "wires": [
            [
                "53f8b00c.c7a45"
            ],
            [
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "53f8b00c.c7a45",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Success",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 520,
        "wires": [
            [
                "e92ac601.f7b2e8"
            ]
        ]
    },
    {
        "id": "afc63aad.57c348",
        "type": "sqlite",
        "z": "a0cdded1.a335c",
        "mydb": "a9b7ad7b.f992a",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "RoyalT",
        "x": 620,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "e4357346.98cec",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "add NFT",
        "func": "var loanID = flow.get('loanID',loanID);\nvar NFT = flow.get('NFT',NFT);\nvar issuer = flow.get('issuer',issuer);\nvar amount = flow.get('amount',amount);\nvar fee = flow.get('fee',fee);\nvar duration = flow.get('duration',duration);\n//var XDR = flow.get('XDR',XDR);\nvar secretnft = flow.get('secretnft',secretnft)\n//msg.topic = \"INSERT INTO TeleUsers(id, public, private) values(\"+user+\", \"+'\"'+public+'\", '+'\"'+private+'\")'\n\n\nmsg.topic = \"INSERT INTO Loans(loanID, NFT, Issuer, Amount, Fee, Time, Secret) values(\"+loanID+\", \"+'\"'+NFT+'\", '+'\"'+issuer+'\", '+'\"'+amount+'\", '+'\"'+fee+'\",'+'\"'+duration+'\",'+'\"'+secretnft+'\")'\nloanID=loanID+1\nflow.set('loanID',loanID);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar loanID = 0;\nflow.set('loanID',loanID);",
        "finalize": "",
        "x": 440,
        "y": 1700,
        "wires": [
            [
                "afc63aad.57c348"
            ]
        ]
    },
    {
        "id": "741b4da8.1ba8d4",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "RoyalT",
        "label": "RoyalT",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1940,
        "y": 800,
        "wires": []
    },
    {
        "id": "28885489.cea38c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "calculate RoyalT",
        "func": "msg.royalty=msg.price*.1\nmsg.royalty=msg.royalty.toFixed(7)\n    msg.payload=msg.royalty+\" XLM\"\n  \n    node.send(msg)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 800,
        "wires": [
            [
                "741b4da8.1ba8d4",
                "928d7457.ab0238",
                "77bd78dc.f7dce8"
            ]
        ]
    },
    {
        "id": "c0fd7723.7628a8",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "b7bc8c2.90c527",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Total",
        "label": "Total",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1930,
        "y": 840,
        "wires": []
    },
    {
        "id": "928d7457.ab0238",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "calculate total",
        "func": "var pricedisplay=parseFloat(msg.price)\nvar royaltydisplay=parseFloat(msg.royalty)\n//flow.set('pricedisplay',pricedisplay)\n//flow.set('royaltydisplay',royaltydisplay)\n\n    msg.payload=pricedisplay+royaltydisplay+\" XLM\"\n    node.send(msg)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 840,
        "wires": [
            [
                "c0fd7723.7628a8",
                "688419e7.0385f8"
            ]
        ]
    },
    {
        "id": "5357ebbd.f252a4",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f36459ea.16b5d8",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Price decreases by 1% per mint edition",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 820,
        "y": 680,
        "wires": []
    },
    {
        "id": "688419e7.0385f8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 900,
        "wires": []
    },
    {
        "id": "77bd78dc.f7dce8",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 760,
        "wires": []
    },
    {
        "id": "18aaeaf0.2e8ba5",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "ff753feb.10ba6",
        "type": "http request",
        "z": "a0cdded1.a335c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://horizon-testnet.stellar.org/accounts/GAGVQUHVQD2COOS6VF5R26K2U5OBFOBX2UASSEUBXRVIPA4VTMY3IH7Z",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 350,
        "y": 700,
        "wires": [
            [
                "18aaeaf0.2e8ba5",
                "d3b78c35.95832"
            ]
        ]
    },
    {
        "id": "a555679c.8234f8",
        "type": "inject",
        "z": "a0cdded1.a335c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "ff753feb.10ba6"
            ]
        ]
    },
    {
        "id": "ad83ca64.ee3d78",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 800,
        "wires": []
    },
    {
        "id": "d3b78c35.95832",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "get data",
        "func": "msg.royalty=msg.payload.data[1]\n//msg.royalty=msg.payload.data[0].price\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "ad83ca64.ee3d78"
            ]
        ]
    },
    {
        "id": "23c2407d.ca284",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Create offer",
        "info": "",
        "x": 440,
        "y": 2140,
        "wires": []
    },
    {
        "id": "fd1a6a0.54e5a98",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Secret Key",
        "label": "Secret Key",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1130,
        "y": 2220,
        "wires": [
            [
                "7497a584.1adb4c"
            ]
        ]
    },
    {
        "id": "75fcd0b4.6843e",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Asset to sell - Name",
        "label": "NFT to sell - Name",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1160,
        "y": 2260,
        "wires": [
            [
                "9f40e579.f3ea58"
            ]
        ]
    },
    {
        "id": "e24e82c2.2d136",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Price",
        "label": "Price /XLM max 214",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 4,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1110,
        "y": 2460,
        "wires": [
            [
                "d3539e4e.21967"
            ]
        ]
    },
    {
        "id": "7497a584.1adb4c",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "secret2",
        "func": "var secret2 = msg.payload\nflow.set('secret2',secret2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "9f40e579.f3ea58",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "sell",
        "func": "var sell = msg.payload\nflow.set('sell',sell);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "9ef10b08.40def8",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f18028a3.d866a8",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Success text display",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 900,
        "y": 2340,
        "wires": []
    },
    {
        "id": "13b0101f.2a8b6",
        "type": "ui_text",
        "z": "a0cdded1.a335c",
        "group": "f18028a3.d866a8",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Submitting text display",
        "label": "",
        "format": "{{msg.topic}}",
        "layout": "row-spread",
        "x": 900,
        "y": 2260,
        "wires": []
    },
    {
        "id": "3a2dc56f.9f03da",
        "type": "ui_button",
        "z": "a0cdded1.a335c",
        "name": "Submit Offer",
        "group": "f18028a3.d866a8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Submit Offer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "27bd058.c9a7efa",
                "7f9dfe90.18513",
                "a2884e0b.53d4a",
                "badac99b.87f728"
            ]
        ]
    },
    {
        "id": "27bd058.c9a7efa",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Status Update",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Building Tx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 2260,
        "wires": [
            [
                "13b0101f.2a8b6"
            ]
        ]
    },
    {
        "id": "7f9dfe90.18513",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 2300,
        "wires": [
            [
                "9ef10b08.40def8"
            ]
        ]
    },
    {
        "id": "24fc04b3.0f2cfc",
        "type": "change",
        "z": "a0cdded1.a335c",
        "name": "Reset Field",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 2280,
        "wires": [
            [
                "13b0101f.2a8b6"
            ]
        ]
    },
    {
        "id": "d3539e4e.21967",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "price2",
        "func": "var price2 = msg.payload*10000000\nflow.set('price2',price2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "93e7bf2b.5c07a",
        "type": "ui_text_input",
        "z": "a0cdded1.a335c",
        "name": "Asset to sell - Issuer",
        "label": "NFT to sell - Issuer",
        "tooltip": "",
        "group": "f18028a3.d866a8",
        "order": 3,
        "width": "0",
        "height": "0",
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "",
        "topicType": "str",
        "x": 1160,
        "y": 2300,
        "wires": [
            [
                "207bfacd.9eeaf6"
            ]
        ]
    },
    {
        "id": "207bfacd.9eeaf6",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "selliss",
        "func": "var selliss = msg.payload\nflow.set('selliss',selliss);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "16b782d2.802e5d",
        "type": "comment",
        "z": "a0cdded1.a335c",
        "name": "Store Variables from Dashboard UI",
        "info": "",
        "x": 1220,
        "y": 2180,
        "wires": []
    },
    {
        "id": "a2884e0b.53d4a",
        "type": "function",
        "z": "a0cdded1.a335c",
        "name": "Create Sell Offer",
        "func": "var StellarSdk = global.get(\"stellarsdk\");\nvar server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n\nvar secret2 = flow.get('secret2',secret2);\nvar sell = flow.get('sell',sell);\nvar selliss = flow.get('selliss',selliss);\nvar price2 = flow.get('price2',price2);\n//price2=toString(price2)\nvar sourceKeys = StellarSdk.Keypair.fromSecret(\n  secret2,\n);\n//var destinationId = msg.payload.sourceAccount;\n// Transaction will hold a built transaction we can resubmit if the result is unknown.\nvar transaction;\n\n// First, check to make sure that the destination account exists.\n// You could skip this, but if the account does not exist, you will be charged\n// the transaction fee when the transaction fails.\nserver\n  //.loadAccount(destinationId)\n  // If the account is not found, surface a nicer error message for logging.\n  //.catch(function (error) {\n   // if (error instanceof StellarSdk.NotFoundError) {\n  //    throw new Error(\"The destination account does not exist!\");\n  //  } else return error;\n // })\n  // If there was no error, load up-to-date information on your account.\n  .loadAccount(sourceKeys.publicKey())\n  \n  .then(function (sourceAccount) {\n    // Start building the transaction.\n    transaction = new StellarSdk.TransactionBuilder(sourceAccount, {\n      fee: StellarSdk.BASE_FEE,\n      networkPassphrase: StellarSdk.Networks.TESTNET,\n    })\n      .addOperation(\n        StellarSdk.Operation.manageSellOffer({\n            selling: new StellarSdk.Asset(sell,selliss),\n            buying: new StellarSdk.Asset.native(),\n            amount: \".0000001\",\n            price: price2\n     }),\n      )\n      // A memo allows you to add your own metadata to a transaction. It's\n      // optional and does not affect how Stellar treats the transaction.\n      .addMemo(StellarSdk.Memo.text(\"NFT Sale by RoyalT\"))\n      // Wait a maximum of three minutes for the transaction\n      .setTimeout(180)\n      .build();\n    // Sign the transaction to prove you are actually the person sending it.\n\n    transaction.sign(sourceKeys);\n    msg.payload=\"Submitting to Stellar\"\n    node.send(msg);\n    // And finally, send it off to Stellar!\n    return server.submitTransaction(transaction);\n  })\n  .then(function (result) {\n    //console.log(\"Success! Results:\", result);\n    msg.payload = \"Success\"+\" https://stellar.expert/explorer/testnet/account/\"+sourceKeys.publicKey();\n    node.send(msg);\n  })\n  .catch(function (error) {\n    msg.payload =\"Something went wrong! \"+ error\n    node.send(msg);\n    // If the result is unknown (no response body, timeout etc.) we simply resubmit\n    // already built transaction:\n    // server.submitTransaction(transaction);\n  });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 2420,
        "wires": [
            [
                "9ef10b08.40def8",
                "24fc04b3.0f2cfc",
                "9eafd43c.cbbd78"
            ]
        ]
    },
    {
        "id": "badac99b.87f728",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 2480,
        "wires": []
    },
    {
        "id": "9eafd43c.cbbd78",
        "type": "debug",
        "z": "a0cdded1.a335c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2500,
        "wires": []
    },
    {
        "id": "b7bc8c2.90c527",
        "type": "ui_group",
        "name": "Buy",
        "tab": "2cda40af.acf6e",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f36459ea.16b5d8",
        "type": "ui_group",
        "name": "Mint",
        "tab": "2cda40af.acf6e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a9b7ad7b.f992a",
        "type": "sqlitedb",
        "db": "RoyalT",
        "mode": "RWC"
    },
    {
        "id": "f18028a3.d866a8",
        "type": "ui_group",
        "name": "Sell",
        "tab": "2cda40af.acf6e",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2cda40af.acf6e",
        "type": "ui_tab",
        "name": "RoyalT",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    }
]